<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客搭建的从无到有</title>
      <link href="2021/06/14/HexoAbout/"/>
      <url>2021/06/14/HexoAbout/</url>
      
        <content type="html"><![CDATA[<h3 id="对于Hexo的搭建回忆"><a href="#对于Hexo的搭建回忆" class="headerlink" title="对于Hexo的搭建回忆"></a>对于Hexo的搭建回忆</h3><details green><summary> 回忆·陈年往事(略看) </summary>              <div class='content'>              <div class="note warning no-icon flat"><p>记得，最开始的时候在(2019)搭建Minecraft服务器，起初做了一个小规模的服务器，后来随着服务器人数增多，变的规模庞大了一些，之后我去看过有很多服务器，都有着自己的(官网/博客)所以我就花时间去学习如何搭建了Discuz，记得在那时我买了(阿里云的机子+阿里云的域名)后弄了备案，搭建起来后发现也没用,因资金短缺，没时间管理我也就关闭了。).</p></div><div class="note primary no-icon flat"><p>已经过去两年多,直到有一天我在网上浏览东西的时候，看到很多技术篇的时候，突然也想搭建一个博客(可能就是所谓的好奇心)来进行分享文章了，其实一开始呢我是通过没日没夜的(看教程和看视频)来尝试搭建Hexo这种办法，记得在那时候在已经研究Hexo第五天晚上的时候，因为(Waline评论)不会给讨论区里添加(标注)，想起糖果屋的博客里,点击申请加入(糖果屋)群，那个时候因为太晚了，导致没人同意，直到第二天的早上，我才加入群里，去询问了问题，一开始并没有人，然后差不多是等到了中午，<a href="https://akilar.top/">店长</a>才出来给我解答，添加后，果然解决了，记得用leancloud搭建Waline后来搞炸了，店长就推荐了我用(Twikoo评论)。</p></div><div class="note success no-icon flat"><p>后来,店长推荐我去学了优化笔记(三天结束)然后我就把Hexo重构了(1200遍),直到现在，有很多问题，我都是自己可以解决的了，也感谢糖果屋，让我认识了很多的朋友(<a href="https://akilar.top/">店长</a>、<a href="https://www.antmoe.com/">小康</a>、<a href="https://www.antmoe.com/">小嘉</a>、<a href="https://www.nesxc.com/">小N</a> 、<a href="https://noionion.top/">小猹</a>、<a href="https://blog.zhheo.com/">洪哥</a>…)让我在这个温暖的大家庭，学习下去。</p></div>              </div>            </details><h3 id="关于文中图片大小的问题"><a href="#关于文中图片大小的问题" class="headerlink" title="关于文中图片大小的问题"></a>关于文中图片大小的问题</h3><details yellow><summary> 点击了解图片大小的问题(了解) </summary>              <div class='content'>              <div class="note warning modern"><ol><li>本篇文章图片资源webp格式的图片占百分之三十九,Png格式的图片占百分之六十一</li><li>为了能在后面文章当中有一个更好的观感,所以Png格式的图片占比例较多</li><li>但有些图片尺寸大,需要你自行放大查看一下(请包涵一下)</li></ol></div>              </div>            </details><h3 id="什么是-Hexo呢"><a href="#什么是-Hexo呢" class="headerlink" title="什么是 Hexo呢?"></a>什么是 Hexo呢?</h3><details red><summary> 点击了解Hexo(了解) </summary>              <div class='content'>              <div class="note info modern"><p>Hexo 是一个可以快速搭建博客的简洁框架，俗话说: 就是静态页面生成器，用 Markdown（或其他渲染引擎）解析文章，在几秒之内就可以使用主题，来构架一个完美的博客。</p></div>              </div>            </details><h3 id="为什么下载环境依赖"><a href="#为什么下载环境依赖" class="headerlink" title="为什么下载环境依赖?"></a>为什么下载环境依赖?</h3><details ><summary> 点击查看了解环境依赖(了解) </summary>              <div class='content'>              <div class="note warning flat"><p>以下讲述的内容较多,如果是好奇的同学可以试着看下<br>其他同学想快速代入的话,即可直接着看下面的教程啦</p></div><details red><summary> Node是什么? </summary>              <div class='content'>              <div class="note info modern"><ol><li>(Node.js是什么？)</li><li>(Node究竟是什么？)</li><li>(其实通俗来讲就是一种通过JavaScript语言来开发web服务端的依赖)</li><li>(那这时候，肯定就有人说了啊，MMP我还是没听懂啊)</li><li>(不要着急,我们接着来看下面)</li></ol></div>              </div>            </details><details blue><summary> Node的主要含义 </summary>              <div class='content'>              <ol><li>(当浏览器给网站发请求的过程一直没有变化过,但当浏览器给网站发了请求。服务器收到了请求，然后开始搜寻被请求的资源。如果有要求，服务器还会通过数据库进行查询，接着把返回的结果传回给浏览器。</li><li>(不过，在传统的Web服务器当中（比如Apache）每一次请求都会强制让服务器创建一个新的进程来处理这个请求。)</li><li>(后来有了Ajax。有了Ajax，我们就不用每次都请求一个完整的新页面了，取而代之的是，每次只请求需要的部分页面信息就可以了。)</li><li>(这显然是一个进步。但是比如你要建一个FriendFeed这样的社交网站（类似人人网那样的刷朋友新鲜事的网站) )</li><li>(你的好友会随时的推送新的状态，然后你的新鲜事会实时自动刷新。)</li><li>(要达成这个需求，我们需要让用户一直与服务器保持一个有效连接。)</li><li>(目前最简单的实现方法，就是让用户和服务器之间保持长轮询（long polling）)</li><li>(HTTP请求不是持续的连接，你请求一次，服务器响应一次，然后就完了。)</li><li>(长轮训是一种利用HTTP模拟持续连接的技巧。具体来说，只要页面载入了，不管你需不需要服务器给你响应信息，你都会给服务器发一个Ajax请求。)</li><li>(这个请求不同于一般的Ajax请求，服务器不会直接给你返回信息，而是它要等着，直到服务器觉得该给你发信息了，它才会响应。)</li><li>(比如，你的好友发了一条新鲜事，服务器就会把这个新鲜事当做响应发给你的浏览器，然后你的浏览器就刷新页面了。)</li><li>(浏览器收到响应刷新完之后，再发送一条新的请求给服务器，这个请求依然不会立即被响应。)</li><li>(于是就开始重复以上步骤。利用这个方法，可以让浏览器始终保持等待响应的状态。)</li><li>(虽然以上过程依然只有非持续的Http参与，但是我们模拟出了一个看似持续的连接状态)</li><li>(我们再看传统的服务器（比如Apache）)</li><li>(每次一个新用户连到你的网站上，你的服务器就得开一个连接。)</li><li>(每个连接都需要占一个进程，这些进程大部分时间都是闲着的（比如等着你好友发新鲜事，等好友发完才给用户响应信息,或者等着数据库返回查询结果什么的）。)</li><li>(虽然这些进程闲着，但是照样占用内存。)</li><li>(这意味着，如果用户连接数的增长到一定规模，你服务器没准就要耗光内存直接瘫了。)</li></ol>              </div>            </details><details green><summary> Node的作用 </summary>              <div class='content'>              <ol><li>(结合以上所说的,我们来说说如何解决)</li><li>(这种情况怎么解决？解决方法就是刚才上边说的：非阻塞和事件驱动。这些概念在我们谈的这个情景里面其实没那么难理解。)</li><li>(你把非阻塞的服务器想象成一个loop循环，这个loop会一直跑下去。一个新请求来了，这个loop就接了这个请求，把这个请求传给其他的进程（比如传给一个搞数据库查询的进程），然后响应一个回调（callback）。)</li><li>(完事了这loop就接着跑，接其他的请求。这样下来。服务器就不会像之前那样傻等着数据库返回结果了。)</li><li>(如果数据库把结果返回来了，loop就把结果传回用户的浏览器，接着继续跑。在这种方式下，你的服务器的进程就不会闲着等着。)</li><li>(从而在理论上说，同一时刻的数据库查询数量，以及用户的请求数量就没有限制了)</li><li>(服务器只在用户那边有事件发生的时候才响应，这就是事件驱动。)</li></ol>              </div>            </details><details blue><summary> 小结 </summary>              <div class='content'>              <ol><li>(FriendFeed是用基于Python的非阻塞框架Tornado (知乎也用了这个框架) 来实现上面说的新鲜事功能的。)</li><li>(不过，Node.js就比前者更妙了。Node.js的应用是通过JavaScript开发的，然后直接在Google的变态V8引擎上跑。)</li><li>(用了Node.js，你就不用担心用户端的请求会在服务器里跑了一段能够造成阻塞的代码了。)</li><li>(因为JavaScirpt本身就是事件驱动的脚本语言。)</li><li>(你回想一下，在给前端写JavaScript的时候，更多时候你都是在搞事件处理和回调函数。)</li><li>(JavaScript本身就是给事件处理量身定制的语言。)</li><li>(Node.js还是处于初期阶段。)</li><li>(如果你想开发一个基于Node.js的应用，你应该会需要写一些很底层代码。)</li><li>(但是下一代浏览器很快就要采用WebSocket技术了，从而长轮询也会消失。)</li><li>(在Web开发里，Node.js这种类型的技术只会变得越来越重要。)</li></ol>              </div>            </details>              </div>            </details><h3 id="下载依赖环境"><a href="#下载依赖环境" class="headerlink" title="下载依赖环境"></a>下载依赖环境</h3><details yellow><summary> 点击查看如何下载环境依赖(步骤一) </summary>              <div class='content'>              <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>环境的依赖是搭建Hexo博客密不可分的因素</p></div><details blue><summary> Node.js安装包链接(必看) </summary>              <div class='content'>              <div class="note default modern"><p>最新版本:Node-v14.17.0 (会保持随时跟进的)<br>官网链接: <a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br>直下链接: <a href="https://pan.baidu.com/s/1trmEsJehZ1iYnvsg15uF-Q">https://pan.baidu.com/s/1trmEsJehZ1iYnvsg15uF-Q</a> 提取码: qph8<br>(直连下载是为了,解决导致有的时候，进不去官网链接)</p></div>              </div>            </details><details green><summary> Git客户端安装包链接(必看) </summary>              <div class='content'>              <div class="note default modern"><p>最新版本: Git-2.31.1 (会保持随时跟进的)<br>官网链接: <a href="https://git-scm.com/">https://git-scm.com/</a><br>直下链接: <a href="https://pan.baidu.com/s/1obgnXCS0fP3I-bMcrQ00IA">https://pan.baidu.com/s/1obgnXCS0fP3I-bMcrQ00IA</a> 提取码: 3zjr<br>(直连下载是为了,解决导致有的时候，进不去官网链接)</p></div>              </div>            </details>              </div>            </details><h3 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h3><details blue><summary> Node安装教程(步骤二) </summary>              <div class='content'>              <h3 id="Node安装包教程"><a href="#Node安装包教程" class="headerlink" title="Node安装包教程"></a>Node安装包教程</h3><div class="note warning flat"><p>(这是已经下好的<span class='p red'>Node.js</span>一键的安装包)<br>(位置随便放,从哪里点安装都可以)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/1.png"></p><h3 id="载入Node安装包"><a href="#载入Node安装包" class="headerlink" title="载入Node安装包"></a>载入Node安装包</h3><div class="note default flat"><p>(进入<span class='p red'>Node.js</span>安装包内的加载时刻)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/2.png"></p><h3 id="开始Node安装第一步"><a href="#开始Node安装第一步" class="headerlink" title="开始Node安装第一步"></a>开始Node安装第一步</h3><div class="note success flat"><p>(好了终于来到 <span class='p red'>Node.js</span> 的安装包主体)<br>(以下防止你看不懂,我人工翻译)<br>(Back: 返回，当然,现在你又没进去你返回个毛线球呢)<br>(Next: 点击下一步)<br>(Cancel: 取消,也就是结束安装了。)</p></div><div class="tip warning"><p>以上所有按钮讲解,在后续的安装都不会再进行翻译了<br>(因为上面已经讲过了,请自行往上对照翻译,然后执行下一步)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/3.webp"> </p><h3 id="Node安装第二步"><a href="#Node安装第二步" class="headerlink" title="Node安装第二步"></a>Node安装第二步</h3><div class="note default flat"><p>(来到第二步<span class='p red'>Node.js</span>安装包的最终用户许可协议)<br>(中间就是一些许可说明,不用管 )</p></div><div class="note primary flat"><p>(Print: 打印)<br>(I accept the terms in the License Agreement: 我接受许可协议)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/4.webp"> </p><details red open><summary> 请按照以下方式 </summary>              <div class='content'>              <div class="note success modern"><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>I accept the terms in the License Agreement</p>            </div>(此时是已经选中的状态了,直接点击Next就可以了！)</div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/5.webp"> </p><h3 id="Node安装包第三步"><a href="#Node安装包第三步" class="headerlink" title="Node安装包第三步"></a>Node安装包第三步</h3><div class="tip cogs"><p>(来到第三步,安装<span class='p red'>Node.js</span>选择安装位置)<br>(默认是装在这个C盘下的Program Files\nodejs)<br>(这里安装的位置,当然要看个人)<br>(你要是说,哎我有8T储存大小那当我没说)<br>(你随便去安~ 都没意见)<br>(如果是想改变位置,选择Change(改变) 即可)<br>(没有的话，可以直接Next(下一步)了)</p></div><div class="tip bell"><p>以下是两种不同的,安装位置的方法</p></div><h3 id="Node改变安装位置"><a href="#Node改变安装位置" class="headerlink" title="Node改变安装位置"></a>Node改变安装位置</h3><details yellow><summary> 改变安装位置 </summary>              <div class='content'>              <div class="note primary flat"><p>(一看你就是一个,勤俭持存的人啊！)<br>(废话不多说，我们开始吧~)</p></div><div class="note default flat"><p>(以下是我们改变(<span class='p red'>Node.js</span>)安装位置的界面)<br>(中间的呢,就是刚才(C盘)默认要创建的文件夹)<br>(将<span class='p red'>Node.js</span>整体装在这个文件夹里)<br>(我们要做的是改变位置)<br>(先看到右边的列表选择(↓键)点击一下)<br>(就可以选择你的别的盘啦~)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/7.webp"> </p><div class="note default flat"><p>(现在成功来到D盘)<br>(我们首先要做的是创建一个文件夹(哎上面讲了！！！)<br>(看到右边,我给你分别介绍一下,这两个图标按钮有什么功能)<br>(文件夹带着一个(↑)的,表示返回上级文件夹)<br>(靠在它右边的那个,是用作可以新建文件夹的)<br>(那我们现在要做的就是点一下它,来创建一个新的文件夹)<br>(进行存放<span class='p red'>Node.js</span>)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/8.webp"> </p><div class="note default flat"><p>(好了,这时候你会发现,出现了一个 [  ] 修改框,这里面你可以任意(div)存放(<span class='p red'>Node.js</span>)文件夹的名字)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/9.webp"> </p><div class="note default flat"><p>(不过,你也可以按照我的写成<span class='p red'>Node.js</span>文件夹)<br>(好了,这样位置就改变完了)<br>(最后选择OK就可以了！！！)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/10.webp"> </p><div class="note default flat"><p>(再选择点击Next就可以了~)</p></div><div class="note warning flat"><p>然后,记得可以跳出这段,去往下一步安装的开始了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/11.webp"> </p>              </div>            </details><details red><summary> 不改变安装位置 </summary>              <div class='content'>              <div class="note success flat"><p>(碰见大佬了,当我没说~)</p></div><div class="note default flat"><p>(直接点击Next(下一步)即可)<br>(看完,就可以跳出这里了)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/6.webp"> </p>              </div>            </details><h3 id="Node安装包第四步"><a href="#Node安装包第四步" class="headerlink" title="Node安装包第四步"></a>Node安装包第四步</h3><div class="note success flat"><p>(来到第四步~ <span class='p red'>Node.js</span>自定义设置)<br>(这时候,肯定就又人内心开始感叹了)<br>(唉,累死我了,终于看完前边的了)<br>(这堆字母又是啥)<br>(行了,我来人工翻译)</p></div><div class="note success modern"><p>(Node.js runtime: 表示运行环境)<br>(npm package manager: 表示npm包管理器)<br>(Online documentation shortcuts: 在线文档快捷方式)<br>(Add to PATH: 添加到环境变量)<br>(Browse…: 浏览… )<br>(Reset: 重启 )<br>(Disk Usage: 磁盘使用情况)</p></div><div class="note default flat"><p>(这里默认,所以选择Next即可)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/12.webp"> </p><h3 id="Node模块工具安装"><a href="#Node模块工具安装" class="headerlink" title="Node模块工具安装"></a>Node模块工具安装</h3><div class="tip sync"><p>(PS: 来到第五步~ Tools for Native Modules 本机模块工具)<br>(PS: 实际来说: 对构建(Hexo) 没有太大用处)</p></div><details red open><summary> 请按照以下方式 (必须) </summary>              <div class='content'>              <div class='checkbox yellow'><input type="checkbox" />            <p>Automatically install the necessary tools. Note that this will also install Chocolatey. The script will pop-up in a new window after the installation completes.</p>            </div><div class="note default flat"><p>(这里不要选勾,直接Next <span class='p red'>!!!!</span>)</p></div>               </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/13.webp"> </p><div class="note primary flat"><p>(来到<span class='p red'>Node.js</span>安装的最后一步了~)<br>(别骂了别骂了,这就翻译)</p></div><div class="note info flat"><p>(Install: 安装)<br>(这时候,我们点击Install(安装) 就可以了)<br>(Node.js安装过程是完全自动的)<br>(哎,这时候,你就可以去干你想干的任何事)<br>(等回来,就安好了。)</p></div><h3 id="开始安装Node"><a href="#开始安装Node" class="headerlink" title="开始安装Node"></a>开始安装Node</h3><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/14.webp"> </p><div class="note success simple"><p>(好了,正在安装中….)<br>(请耐心等待嗷~)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/15.webp"></p><h3 id="Node安装结束"><a href="#Node安装结束" class="headerlink" title="Node安装结束"></a>Node安装结束</h3><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>(恭喜你此刻<span class='p red'>Node.js</span>依赖就安装完成了)</p></div><div class="note info modern"><p>(可以接着前往,下一步的<span class='p red'>Git客户端</span>安装了)</p></div><div class="note warning modern"><p>同学你这里记得点一下Finish(结束)就可以结束了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/16.webp"> </p>              </div>            </details><details green><summary> Git客户端的安装教程(步骤三) </summary>              <div class='content'>              <h3 id="Git安装包教程"><a href="#Git安装包教程" class="headerlink" title="Git安装包教程"></a>Git安装包教程</h3><div class="note warning flat"><p>(又是熟悉的介绍)<br>(这是下好<span class='p red'>Git客户端</span>安装包)<br>(位置随便放,从哪里点安装都可以)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git1.png"> </p><div class="note default flat"><p>(这次和<span class='p red'>Node.js</span>那边打开安装包过程,好像有点截然不同是吧)<br>(<span class='p red'>Node.js</span>那边的进入安装包,还得有个加载)<br>(咱<span class='p gray'>Git</span>安装这边,就没有那些花里胡哨)<br>(废话不多说,开始讲)</p></div><h3 id="进入Git安装包"><a href="#进入Git安装包" class="headerlink" title="进入Git安装包"></a>进入Git安装包</h3><div class="note success modern"><p>(依旧是为了防止你们看不懂,我进行人工翻译)<br>(Next: 点击下一步)<br>(Cancel: 取消,也就是结束安装了)<br>(所以,我们这里直接点击(Next) 就可以了)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git2.webp"> </p><div class="note default flat"><p>(来到第二步)<br>(这是选择<span class='p gray'>Git</span>客户端安装的位置)<br>(是不是突然发现,这里和<span class='p red'>Node.js</span>的安装包改变位置有点像)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning no-icon flat"><p>(Browse… : 改变位置 &lt; 顾名思义:改变某某东西的安装位置)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git3.webp"> </p><div class="note primary flat"><p>(直接点击 Browse… 按钮)<br>(然后选择别的磁盘(D、E、B….)下即可)<br>(如果你有足够大的内存 默认装<span class='p red'>C</span>盘 没意见)<br>(装别的磁盘,是为了 节省<span class='p red'>C</span>磁盘 的内存大小)</p></div><div class="tip "><p>(因此,我们这边直接选择安装到D盘下了)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git4.webp"> </p><div class="note default flat"><p>(来到第三步)<br>(选择<span class='p gray'>Git</span>客户端的安装组件)</p></div><details red open><summary> 组件翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下的翻译,请您仔细(详读或略读)<br>都是可以由您自己决定的</p></div><div class="tip cogs"><div class='checkbox yellow'><input type="checkbox" />            <p>Additional icons：图标组件(通俗易懂: 将图标在桌面上创建)</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>On the Desktop ：创建Git客户端图标(联合上面的意思: 就是把图标放到桌面上)</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Windows Explorer integration ： Windows资源管理器集成(桌面浏览)</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Git Bash Here ：使用Git Bash方式，shell方式</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Git GUI Here: 使用桌面程序方式</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Git LFS : 大文件支持</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Associate .git* configuration files with the default text editor : (关联配置文件：是否关联git配置文件，该配置文件主要显示文本编辑器样式)</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Associate .sh files to be run with Bash : (关联shell脚本文件：是否关联Bash命令执行脚本文件)</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>Use a TrueType font in all console windows : 使用TrueType编码 (在命令行中是否使用TrueType编码，该编码是微软和苹果公司制定的通用编码)</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>Check daily for Git for Windows updates : (每天进行检查Git是否有Windows更新)</p>            </div></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git5.webp"> </p><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>Additional icons</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>On the Desktop</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>Windows Explorer integration</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>Git Bash Here</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>Git GUI Here</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>Git LFS</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>Associate .git* configuration files with the default text editor</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>Associate .sh files to be run with Bash</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>Use a TrueType font in all console windows</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>Check daily for Git for Windows updates</p>            </div><div class="note primary flat"><p>(按照框内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git6.webp"> </p><div class="note info flat"><p>(来到第四步)<br>(设置开始菜单快捷方式目录：设置开始菜单中快捷方式的目录名称, 也可以选择不在开始菜单中创建快捷方式。)<br>(我们这里不用管,直接下一步即可)<br>(因为,它将会给你自动在开始的菜单上添加)<br>(方便你快速的打开<span class='p gray'>Git</span>客户端)</p></div><div class="note red icon modern"><i class="note-icon fas fa-fan"></i><p>(这里也是直接点击(Next) 就可以了)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git7.webp"> </p><div class="note default flat"><p>(来到第五步)<br>(选择<span class='p red'>Git</span>使用的默认编辑器)</p></div><details red open><summary> 编辑器翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下的翻译,请您仔细(详读或略读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><p>The <u>Vim editor</u> , while powerful, <u>can be hard to use.</u> (Vim编辑器虽然功能强大，但却难以使用。)<br>Its user interface is unintuitive and its key bindings are awkward. (它的用户界面不直观，其键绑定很尴尬.)</p><p><span class='p red'>Note</span>: Vim is the default editor of Git for Windows only for historical reasons,<br>(注意: VIM是GitforWindows的默认编辑器)<br>andit is highly recommended to switch to a modern GUI editor instead<br>(只是出于历史原因，强烈建议改用现代GUI编辑器。)</p><p><span class='p red'>Note</span>: This will leave the ‘core.editor’ option unset, which will make Git fall back<br>(注意: 这将使“core.Editor”选项未设置，这将使Git返回)<br>to the ‘EDITOR’ environment variable. The default editor is Vim - but you<br>(到“编辑器”环境变量 默认编辑器是Vim-但是您 )<br>may set it to some other editor of your choice. (可以将其设置为您所选择的其他编辑器。)</p></div><div class="note success flat"><p>(所以,我们这里建议直接使用(Vim编辑器)<br>(选择Use Vim (the ubiquitous text editor)as Git’s default editor)</p></div>              </div>            </details><div class="note red icon modern"><i class="note-icon fas fa-fan"></i><p>(接着直接点击(Next) 就可以了)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git8.webp"> </p><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下的翻译,请您仔细(详读或略读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><p>Use Vim (the ubiquitous text editor)as Git’s default editor (使用 Vim 作为 Git 的默认编辑器)<br>Use Notepad++ as Git’s default editor (使用 Notepad++ 作为 Git 的默认编辑器)<br>Use Visual Studio Code as Git’s default editor (使用 Visual Studio Code 作为Git 的默认编辑器)<br>Use Visual Studio Code Insiders as Git’s default editor (使用Visual Studio Code Insiders 作为 Git 的默认编辑器)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git9.webp"> </p><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下的翻译,请您仔细(详读或略读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><p>Use Sublime Text as Git’s default editor (使用Sublime Text 作为 Git 的默认编辑器)<br>Use Atom as Git’s default editor (使用 Atom 作为 Git 的默认编辑器)<br>Use VSCodium as Git’s default editor (使用 VSCodium 作为 Git 的默认编辑器)<br>Use Notepad as Git’s default editor (使用 Notepad 作为 Git 的默认编辑器)<br>Use Wordpad as Git’s default editor (使用 Wordpad 作为 Git 的默认编辑器)<br>Select other editor as Git’s default editor: (选择其他编辑器作为Git的默认编辑器)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git10.webp"> </p><div class="note default flat"><p>(来到第六步)<br>(调整新存储库中初始分支的名称)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下的翻译,请您仔细(详读或略读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Let Git decide (让Git决定)</p>            </div>Let Git use its default branch name(currently: "master") for the initial branchin newly created repositories. The Git project <u>intends</u> to change this default toa more inclusive name in the near future让Git使用它的默认分支名称(当前: “master” :) 作为初始分支创建的存储卡Git项目打算在不就的将来将这个默认名称更改为一个梗具包容性的名称。<div class='checkbox yellow'><input type="radio" />            <p>Override the default branch name for new repositories (覆盖新存储库的默认分支名称 )</p>            </div><span class='p red'>NEW!</span> Many teams already renamed their default branches; common choices are )"main", "trunk" and "development". Specify the name "git init" should use for the )initial branch: 新的! 许多团队已经重新命名了它们的默认分支; 常见的选择是 "主" 、 "主干" 和 "开发"。指定出事分支应该使用的名称 "git init" )This setting does not affet existing repositories (此设置不影响现有存储库。) </div>              </div>            </details><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Let Git decide</p>            </div>Let Git use its default branch name(currently: "master") for the initial branchin newly created repositories. The Git project <u>intends</u> to change this default toa more inclusive name in the near future<div class='checkbox yellow'><input type="radio" />            <p>Override the default branch name for new repositories</p>            </div><span class='p red'>NEW!</span> Many teams already renamed their default branches; common choices are )"main", "trunk" and "development". Specify the name "git init" should use for the )initial branch: <div class="note primary flat"><p>(按照以上框内和图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git11.webp"> </p><div class="note default flat"><p>(来到第七步)<br>(设置Git客户端的PATH环境)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下的翻译,请您仔细(详读或略读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow'><input type="radio" />            <p>Use Git from Git Bash only (仅从Git Bash使用Git)</p>            </div><p>This is the most cautious choice as your PATH will not be modified at all.<br>You will only be able to use the Git commmand line tools from Git Bash<br>(Git Bash只能通过Git本身自带, 这是最安全的选择)<br>(因为您的PATH根本不会被修改。您只能 使用 Git Bash 的 )<br>Git 命令行工具。 第三方软件将不能使用 (如果怕造成环境混乱就选择第一个) </p><div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Git from the command line and also from 3rd-party software (从命令行以及第三方软件进行 Git)</p>            </div><p><span class='p red'>(Recommended)</span> This option adds only some minimal Git wrappers to your<br>PATH to avoid cluttering you environment with optional Unix tools.<br>You will be able to use Git from Git Bash, the Command Prompt and the Windows<br>PowerShell as well as any third-party sofware looking for Git in PATH<br>(从命令行以及第三方软件进行Git选项被认为是最安全的, 因为它仅向PATH添加了 一些最小的Git包装器,)<br>(以避免使用可选的Unix工具造成环境混乱。)<br>您将能够从Git Bash, 命令提示Windows PowerShell以及在PATH中寻找Git的任何第三方软件使用Git。(推荐) </p><div class='checkbox yellow'><input type="radio" />            <p>Use Git and optional Unix tools from the Command Prompt (使用命令提示符中Git和可选的Unix工具)</p>            </div>Both Git and the optional Unix tools will be added to your PATH. (Git 和可选的 Unix 工具都将添加到您的 PATH 中。)<span class='p red'>Warning: This will overrride Windows tools like find and sort. Only</span> <span class='p red'>use this option if you understand the implications</span>  (从命令提示符使用Git和可选的Unix工具" , 警告: 这将覆盖Windows工具, )如 "find 和sort" 只有在了解其含义后才使用此选项 (一般不推荐,除非你能理解) </div>              </div>            </details><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow'><input type="radio" />            <p>Use Git from Git Bash only</p>            </div>This is the most cautious choice as your PATH will not be modified at all. You will only be able to use the Git commmand line tools from Git Bash <div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Git from the command line and also from 3rd-party software</p>            </div><span class='p red'>(Recommended)</span> This option adds only some minimal Git wrappers to your PATH to avoid cluttering you environment with optional Unix tools.You will be able to use Git from Git Bash, the Command Prompt and the WindowsPowerShell as well as any third-party sofware looking for Git in PATH <div class='checkbox yellow'><input type="radio" />            <p>Use Git and optional Unix tools from the Command Prompt</p>            </div>Both Git and the optional Unix tools will be added to your PATH.<span class='p red'>Warning: This will overrride Windows tools like find and sort. Only</span> <span class='p red'>use this option if you understand the implications</span>  <div class="note primary flat"><p>(按照图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git12.webp"> </p><div class="note default flat"><p>(来到第八步)<br>(选择HTTPS传输方式)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下中的翻译,请您仔细(略读或详读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Use the OpenSSL library (使用 OpenSSL 库)</p>            </div>Server certificates will be validated using the ca-bundle.crt file (服务器证书将使用ca-bundle.crt文件进行验证。 这是默认项目(推荐) <div class='checkbox yellow'><input type="radio" />            <p>Use the native Windows Secure Channel library (使用本地 Windows 安全通道库。)</p>            </div><p>Server certificates will be validated using Windows Certificate Stores.<br>(服务器证书将使用 Windows 证书存储进行验证。)<br>This option also allows you to use your company’s internal Root CA certificates<br>( 此选项还允许您使用公司的内部根CA证书 )<br>distributed e.g. via Active Directory Domain Services (分散式 通过Active Directory域服务 )</p></div>              </div>            </details><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Use the OpenSSL library</p>            </div>Server certificates will be validated using the ca-bundle.crt file <div class='checkbox yellow'><input type="radio" />            <p>Use the native Windows Secure Channel library</p>            </div>Server certificates will be validated using Windows Certificate Stores. This option also allows you to use your company's internal Root CA certificates distributed e.g. via Active Directory Domain Services<div class="note primary flat"><p>(按照图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git13.webp"> </p><div class="note default flat"><p>(来到第九步)<br>(配置提交行尾符号转换)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下中的翻译,请您仔细(略读或详读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Checkout Windows-style</p>            </div>(检查出Windows格式转换为Unix格式 (将Windows格式的换行转为Unix格式的换行再进行提交。) Git will convert LF to CRLF when checking out text files. When committing  (Git 签出文本文件时，会将 LF 转换为 CRLF。 提交时 )text files, CRLF will be converted to LF. For cross-platform projects,  (文本文件，CRLF 将转换为 LF。对于跨平台项目， )this is the recommended setting on Windows("core. autocrif"is set to "true").  (这是 Windows 上的建议设置（"core.autocrif" 设置为 "true"）。<div class='checkbox yellow'><input type="radio" />            <p>Checkout as-is</p>            </div>(检查来源格式转为Unix格式: 不管什么格式的，一律转为Unix格式的换行再进行提交。)<p>Git will not perform any conversion when checking out text files. When (签出文本文件时，Git不会执行任何转换。 什么时候  )<br>committing text files, CRLF will be converted to LF. For cross-platform projects, (提交文本文件后，CRLF将转换为LF。 对于跨平台项目，  )<br>this is the recommended setting on Unix(“core.autocrif” is set to “input”). (这是在Unix上的推荐设置（“ core.autocrif”设置为“ input”  )</p><div class='checkbox yellow'><input type="radio" />            <p>Checkout as-is</p>            </div><p>Git will not perform any conversions when checking out or committing (Git 在签出或提交文本文件时不会执行任何转换。 )<br>text files. Choosing this option is not recommended for cross-platform (文本文件。不建议跨平台选择此选项  )<br>projects(“core.autocrif”is set to”false”). 项目选择此选项（”core.autocrif” 设置为 “false”）。</p></div>              </div>            </details><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Checkout Windows-style</p>            </div>Git will convert LF to CRLF when checking out text files. When committingtext files, CRLF will be converted to LF. For cross-platform projects,text files, CRLF will be converted to LF. For cross-platform projects,this is the recommended setting on Windows("core. autocrif"is set to "true").<div class='checkbox yellow'><input type="radio" />            <p>Checkout as-is</p>            </div>Git will not perform any conversion when checking out text files. Whencommitting text files, CRLF will be converted to LF. For cross-platform projects, this is the recommended setting on Unix("core.autocrif" is set to "input").Git will not perform any conversions when checking out or committingtext files. Choosing this option is not recommended for cross-platform projects("core.autocrif"is set to"false").<div class="note primary flat"><p>(按照图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git14.webp"> </p><div class="note default flat"><p>(来到第十步)<br>(配置终端模拟器以与Git Bash一起使用)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下中的翻译,请您仔细(略读或详读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Use MinTTY(the default terminal of MSYS2 (使用MinTTY (MSYS2的默认终端)</p>            </div>Git Bash will use MinTTY as terminal emulator, which sports a resizable window (Git Bash将使用MinTTY作为终端模拟器 )non-rectangular selections and a Unicode font.Windows console programs(such (该模拟器具有可调整大小的窗口非矩形选择和 Unicode 字体。Windows 控制台程序（例如)  as interactive Python) must be launched via 'winpty' to work in MinTTY.(交互式 Python）必须通过 "winpty" 启动才能在 MinTTY 中运行。)<div class='checkbox yellow'><input type="radio" />            <p>Use Windows’ default console (使用Windows的默认控制台窗口”)</p>            </div><p>Git will use the default console window of Windows(“cmd.exe”), which works well (Git将使用Windows的默认控制台窗口（“ cmd.exe”），该窗口效果很好 )<br>with Win32 console programs such as interactive Python or node.js, but has a (与Win32控制台程序（例如交互式Python或node.js）配合使用，但具有 )<br>very limited default scroll-back,needs to be configured to use a Unicode font in (默认回滚非常有限，需要配置为使用Unicode字体)<br>order to display non-ASCII characters correctly, and prior to Windows 10 its (为了正确显示非ASCII字符，并且在Windows 10之前 )<br>window was not freely resizable and it only allowed rectangular text selections. (窗口不能随意调整大小，它只允许选择矩形文本。)</p></div>              </div>            </details><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Use MinTTY(the default terminal of MSYS2)</p>            </div>Git Bash will use MinTTY as terminal emulator, which sports a resizable windowon-rectangular selections and a Unicode font.Windows console programsas interactive Python) must be launched via 'winpty' to work in MinTTY.<div class='checkbox yelloW'><input type="radio" />            <p>Use Windows’ default console</p>            </div>Git will use the default console window of Windows("cmd.exe"), which works wellwith Win32 console programs such as interactive Python or node.js, but has avery limited default scroll-back,needs to be configured to use a Unicode font inorder to display non-ASCII characters correctly, and prior to Windows 10 itswindow was not freely resizable and it only allowed rectangular text selections.<div class="note primary flat"><p>(按照图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git15.webp"> </p><div class="note default flat"><p>(来到第十一步)<br>(选择<span class='p gray'>Git</span>仓库获取最新的分支)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下中的翻译,请您仔细(略读或详读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Default(fast-forward or merge) (默认（快进或合并）</p>            </div><p>This is the standard behavior ofgit pull”: fast-forward the current branch to<br>(这是 “git pull” 的标准行为：在可能的情况下将 )<br>the fetched branch when possible, otherwise create a merge commit.<br>(当前分支 快进到 获取的分支，否则创建合并提交。)</p><div class='checkbox yellow'><input type="radio" />            <p>Rebase (Git变基)</p>            </div><p>Rebase the current branch onto the fetched. If there are no local<br>commits to rebase, this is equivalent to a fast-forward<br>(将当前仓库分支重新定位到最新的仓库分支上,如果没有重新定位分支本地提交仓库,这相当快速转发)</p><div class='checkbox yellow'><input type="radio" />            <p>Only ever fast-forward (Git的快速向前进)</p>            </div><p>Fast-forward to the fetched branch. Fail if that is not possible.<br>(快速从仓库取来最新的分支,如果不行的话就默认)</p></div>              </div>            </details><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Default(fast-forward or merge)</p>            </div>This is the standard behavior ofgit pull": fast-forward the current branch to the fetched branch when possible, otherwise create a merge commit. <div class='checkbox yellow'><input type="radio" />            <p>Rebase</p>            </div>Rebase the current branch onto the fetched. If there are no local commits to rebase, this is equivalent to a fast-forward <div class='checkbox yellow'><input type="radio" />            <p>Only ever fast-forward</p>            </div><div class="note primary flat"><p>(按照图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git16.webp"> </p><div class="note default flat"><p>(来到第十二步)<br>(选择凭据助手)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下中的翻译,请您仔细(略读或详读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Git Credential Manager Core (Git凭证管理核心)</p>            </div><p><span class='p red'>(NEW!)</span> Use the new, <u>cross-platform version of the Git Credential Manager.</u><br>(NEW!)使用新的跨平台版本的 Git Credential Manager。<br>See more information about the future of Git Credential Manager <u>here</u>.<br>(在此处查看有关 Git Credential Manager 未来的更多信息。)</p><div class='checkbox yellow'><input type="radio" />            <p>Git Credential Manager (Git 凭证管理)</p>            </div><p>(DEPRECATED) The <u>Git Credential Manager for Windows</u> handles credentials e.g.<br>(不推荐) Windows 的 Git 凭据管理器处理凭据，例如)<br>for Azure DevOps and GitHub (requires .NET framework v4.5.1 or later)<br>(适用于Azure DevOps 和 GitHub（需要.NET Framework v4.5.1 或更高版本）</p><div class='checkbox yellow'><input type="radio" />            <p>Note (没有任何)</p>            </div><p>Do not use a credential helper (不要使用凭据助手。)</p></div>              </div>            </details><details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow checked'><input type="radio" checked="checked"/>            <p>Git Credential Manager Core</p>            </div><span class='p red'>(NEW!)</span> Use the new, <u>cross-platform version of the Git Credential Manager.</u> See more information about the future of Git Credential Manager <u>here</u>. <div class='checkbox yellow'><input type="radio" />            <p>Git Credential Manager</p>            </div>(DEPRECATED) The <u>Git Credential Manager for Windows</u> handles credentials e.g. for Azure DevOps and GitHub (requires .NET framework v4.5.1 or later) <div class='checkbox yellow'><input type="radio" />            <p>Note</p>            </div>(Do not use a credential helper)<div class="note primary flat"><p>(按照图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git17.webp"> </p><div class="note default flat"><p>(来到第十三步)<br>(选择配置额外的选项)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下中的翻译,请您仔细(略读或详读)<br>都是可以由您自己决定的</p></div><div class="note warning no-icon flat"><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Enalbe file system caching (启用文件系统缓存 )</p>            </div>File system data will be read in bulk and cached in memory for certain(将批量读取文件系统数据并将其缓存在内存中以进行某些操作)operations ("core.fscache" is set to "true") ("core.fscache” 设置为 "true")。 )This provides a significant performance boost. (这可以显着提高性能。)<div class='checkbox yellow'><input type="checkbox" />            <p>Enable symbolic links (启用符号链接)</p>            </div>Enable <u>symbolic links</u> (requires the SeCreateSymbolicLink permission) (启用符号链接（需要SeCreateSymbolicLink权限）。)Please note that exsting repositories are unaffected by this setting(请注意，现有存储库不受此设置的影响。)</div>              </div>            </details>  <details red open><summary> 请按照框内选择 (推荐) </summary>              <div class='content'>              <div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Enalbe file system caching</p>            </div>File system data will be read in bulk and cached in memory for certainoperations ("core.fscache" is set to "true") This provides a significant performance boost. <div class='checkbox yellow'><input type="checkbox" />            <p>Enable symbolic links</p>            </div>Enable <u>symbolic links</u> (requires the SeCreateSymbolicLink permission) Please note that exsting repositories are unaffected by this setting<div class="note primary flat"><p>(按照图内已经选择好的状态了)<br>(因此可以选择(Next) 进行下一步了。)</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git18.webp"> </p><div class="note default flat"><p>(来到第十四步)<br>(配置测试选项)</p></div><details red open><summary> 翻译 </summary>              <div class='content'>              <div class="note warning modern"><p>以下中的翻译,请您仔细(略读或详读)<br>都是可以由您自己决定的</p></div><div class="note warning flat"><p>Enable experimental support for pseudo consoles.<br>(启用对伪控制台的实验性支持。)<br><span class='p red'>(NEW!)</span> This allows running native console programs like Node or Python in a<br>(新功能!) (这允许在不使用 winpty 的情况下在 Git Bash 窗口中运行诸如 Node 或 Python)<br>Git Bash window without using winpty, but it still has known bugs.<br>(之类的本机控制台程序，但是它仍然存在已知的错误。) </p></div>              </div>            </details><details red open><summary> 请按照框内的样式完成(必须) </summary>              <div class='content'>              <div class="note warning no-icon flat"><div class='checkbox yellow'><input type="checkbox" />            <p>Enable experimental support for pseudo consoles.</p>            </div></div><div class="note primary flat"><p>(来到最后一步,我们这里不要选择)<br>直接点击 [install] 即可</p></div>              </div>            </details><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git19.webp"> </p><div class="tip success"><p>结尾进入,安装中….</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git20.webp"> </p><div class="note icon modern"><i class="note-icon fab fa-cc-visa"></i><p>最后的话,这里你可以任意选择</p><div class='checkbox'><input type="checkbox" />            <p>Launch Git Bash:打开Git Bash</p>            </div><div class='checkbox gray checked'><input type="checkbox" checked="checked"/>            <p>View Release Notes:浏览 Git 版本信息</p>            </div></div><div class="note warning modern"><p>最后,完美结束安装了<span class='p gray'>Git</span>客户端(恭喜你呀)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/git21.webp"></p>              </div>            </details><h3 id="开始构架安装Hexo"><a href="#开始构架安装Hexo" class="headerlink" title="开始构架安装Hexo"></a>开始构架安装Hexo</h3><details cyan><summary> 点击查看怎样测试环境是否完整(第四步) </summary>              <div class='content'>              <div class="note warning flat"><ol><li>以上”<span class='p red'>Node.js</span>“、”<span class='p red'>Git</span>客户端”一个依赖和工具进行安装完成后</li><li>我们请尝试先执行框内以下指令</li><li>为的是检查一下环境是否完整的安装情况！</li><li>此时肯定就有人说了，奇了个大怪了,我该去哪执行这些命令呢？</li><li>当然是去”CMD命令”或”Git客户端”中啦</li><li>此时肯定又有人问了,CMD是啥？</li><li>CMD: 是一种命令提示符,是系统自带的,首先找到键盘上的win+r,会出现一个运行窗口,里面输入CMD就好啦~</li><li>我就怕有人连(Win+r)都找不到,我来说一下吧</li><li>用你的左手大拇指,按住键盘(Windows)Win图标,然后是左手的食指按住R键,就可以出现了,如果不出现,肯定是快捷键被占用了<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/win.png"></li></ol></div><h3 id="依赖安装测试指令"><a href="#依赖安装测试指令" class="headerlink" title="依赖安装测试指令"></a>依赖安装测试指令</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">node</span> <span class="string">-v</span></span><br><span class="line"><span class="string">git</span> <span class="string">--version</span></span><br><span class="line"><span class="string">npm</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><h3 id="命令提示符测试结果"><a href="#命令提示符测试结果" class="headerlink" title="命令提示符测试结果"></a>命令提示符测试结果</h3><div class="note info flat"><p>以下是分别不同指令测试的结果(返回版本表示成功√)</p></div> <p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%AE%A1%E7%90%86%E5%91%98%E5%91%BD%E4%BB%A4%E6%B5%8B%E8%AF%95%E7%89%88%E6%9C%AC.webp"> </p><h3 id="Git客户端测试结果"><a href="#Git客户端测试结果" class="headerlink" title="Git客户端测试结果"></a>Git客户端测试结果</h3><div class="note info flat"><p>以下是分别不同指令测试的结果(返回版本表示成功√)</p></div> <p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%89%88%E6%9C%AC%E6%B5%8B%E8%AF%95.png"> </p>              </div>            </details><h3 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h3><details yellow><summary> 点击查看为生成Hexo做铺垫(步骤五) </summary>              <div class='content'>              <div class="note info no-icon flat"><ol><li>(哎..咱依赖都弄好了)</li><li>(该得怎么办,才能创建这个<span class='p blue'>Hexo博客</span>呢?)</li><li>(首先,我们得创建一个文件夹啊)</li><li>(我们这边还是那句话)</li><li>(如果你的硬盘内存,有的是的话,当然在桌面创也可以)</li></ol></div><div class="note default simple"><p>(我这边,就直接从D盘下创建了)<br>先用鼠标,右键对准目录,点一下(会出来一个选项框)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E6%96%B0%E5%BB%BA%E6%8C%89%E9%92%AE.png"> </p><div class="note default simple"><p>我们看到,倒数第二个按钮(点击一下它或者把鼠标放在上面也可以)新建(W)<br>就会发现出来新的一个选择框,点击一下那个文件夹</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9.webp"> </p><div class="note success flat"><p>好啦,现在就成功创建出来了</p></div><div class="note default simple"><p>而我们要做的是,给它命名一个名字<br>因为不修改名字的话，它就是一个默认的(新建文件夹)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%96%B0%E6%96%87%E4%BB%B6%E5%A4%B9.png"> </p><div class="note default simple"><p>我们这里就直接创建,为(<span class='p blue'>Hexo博客</span>)<br>你也可以随便创的┗|｀O′|┛ 嗷~~<br>这样一个,名为Hexo博客的文件夹<br>就在D盘下创建好啦~<br>现在我们双击进去</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E5%90%8E%E7%BC%80%E5%90%8D.png"> </p><div class="note default simple"><p>来到文件夹里,我们要做的是设置下载源<br>我们直接对着,文件夹里右键,就能发现有一个叫Git Bash Here的按钮(就是我们的Git客户端)<br>记着要点击一下它就可以</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%88%9B%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E6%96%87%E4%BB%B6%E5%A4%B9.png"> </p><div class="note default simple"><p>好了,然后进入到<span class='p red'>Git客户端</span>里了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BF%9B%E5%85%A5Git%E5%AE%A2%E6%88%B7%E7%AB%AF.png"> </p>              </div>            </details><h3 id="设置npm下载源"><a href="#设置npm下载源" class="headerlink" title="设置npm下载源"></a>设置npm下载源</h3><details green><summary> 点击查看如何设置下载源(步骤六) </summary>              <div class='content'>              <div class="tip warning"><p>(肯定有人就问了: 我为啥要设置下载源呢？)<br>(问: 我能不设置吗?)<br>(答: 可以,当然可以)<br>(答: 只不过呢,你下载东西的网速,可能要下到猴年马月都是个未知数)<br>(原因: 因为npm的默认下载源是国外的)<br>(答: 因此,要进行替换默认的下载源)</p></div><h3 id="npm淘宝下载源"><a href="#npm淘宝下载源" class="headerlink" title="npm淘宝下载源"></a>npm淘宝下载源</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">config</span> <span class="string">set</span> <span class="string">registry</span> <span class="string">https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>我们把上面的地址复制一下<br>粘贴进我们的<span class='p red'>Git</span>客户端里<br>好了,接着直接按键盘上的ENTER(回车) 回车<br>客户端内,稍微加载一下,之后就设置成功啦！</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%AE%BE%E7%BD%AE%E6%B7%98%E5%AE%9D%E6%BA%90.png"> </p>              </div>            </details><h3 id="创建Hexo开始"><a href="#创建Hexo开始" class="headerlink" title="创建Hexo开始"></a>创建Hexo开始</h3><details red><summary> 点击查看如何生成Hexo(步骤七) </summary>              <div class='content'>              <h3 id="创建Hexo指令集"><a href="#创建Hexo指令集" class="headerlink" title="创建Hexo指令集"></a>创建Hexo指令集</h3><div class="tip "><p>然后在刚才的Git客户端进行使用指令</p></div><div class="tip warning"><p>那什么又是Hexo指令集呢?<br>其实就是所谓的Hexo工具包</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>我们把上面的指令复制一下<br>来粘贴到我们的<span class='p red'>Git客户端</span>中<br>然后按下回车键耐心等待。</p></div><div class="tip success"><p>这样就可以啦~</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%AE%89%E8%A3%85Hexo%E6%8C%87%E4%BB%A4%E9%9B%86.png"> </p><h3 id="生成Hexo博客"><a href="#生成Hexo博客" class="headerlink" title="生成Hexo博客"></a>生成Hexo博客</h3><div class="tip "><p>在安装这么多东西后<br>终于可以安装Hexo博客啦！</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">init</span></span><br></pre></td></tr></table></figure><div class="note primary flat"><p>我们把上面的指令复制一下<br>粘贴到我们的<span class='p red'>Git客户端</span>中<br>然后,按下回车键,耐心等待。</p></div><div class="tip success"><p>那以下就是Hexo博客生成的样子啦</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%94%9F%E6%88%90Hexo%E5%8D%9A%E5%AE%A2%E5%AE%8C%E6%AF%95.png"> </p><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Hexo%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90%E5%AE%8C%E6%AF%95.png"> </p><details ><summary> 可能生成失败的原因 (了解) </summary>              <div class='content'>              <div class="note warning flat"><p>以下是可能会出现的问题</p></div><div class="tip sync"><p>(当你在使用hexo init 生成Hexo博客的时候,会出现错误)<br>(是因为最近Github被”七色光联盟”攻击导致网络线路被污染)<br>(使得Github访问、下载的线路变得缓慢了许多)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%94%9F%E6%88%90%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99.png"> </p><div class="note info simple"><p>还有一种情况,是来自以下的一件真实案例,在某同学搭建Hexo出现的问题</p></div><div class="note warning modern"><p>关于以下问题的反馈是来自<a href="https://akilar.top/">店长</a>的建议 (感谢<a href="https://akilar.top/">店长</a>啦~~)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E6%9D%A5%E8%87%AA%E5%BA%97%E9%95%BF%E7%9A%84%E5%A5%BD%E5%BB%BA%E8%AE%AE.png"> </p><div class="note modern"><ol><li>问: 当 “<span class='p red'>Node.js</span>“ 、”<span class='p red'>Git客户端</span>“ 两个环境搭建完后,同时也安装了 “<span class='p blue'>Hexo指令集</span>“</li><li>问: 在使用了博客初始化指令,返回的结果值却是: “bash: command not found”</li><li>问: 这里的意思呢,简而言之就是在执行命令的时候,没有办法找到它</li><li>问: 可心想,我们环境都搭建好了啊,那指令集也弄了,可为什么就是初始化不了呢？</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E6%B2%A1%E6%9C%89%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98.png"> </p><ul><li><ol><li>第一种猜测有可能是这样的,在进行搭建环境的时候,会选择不一样的配置选项,就会导致出现 “一系列有关权限的问题” </li><li>那反之就是在安装时 “<span class='p blue'>Hexo</span>“ 的环境变量没有自动被添加到系统当中</li><li>其次,如果你是按照教程选择的默认的安装配置项,环境变量是会跟随 “npm” 的变量继承到系统当中.</li><li>因此,解决以上问题的方法也不难(请看↓面)</li></ol></li></ul><ol><li>在上面我们已经详细说了,没有添加环境变量导致的无法进行的 “<span class='p blue'>Hexo</span>“ 指令了</li><li>所以我们这里要开始添加环境变量,将<span class='p blue'>Hexo博客</span>根目录下的 “node_modules” 添加到系统的环境变量即可</li><li>以下的指令,直接在<span class='p blue'>Hexo博客</span>根目录下打开Git客户端粘贴进去即可。</li><li>然后添加完后,再执行一次生成<span class='p blue'>Hexo博客</span>命令: hexo init 回车等待即可.</li></ol></div><div class="note modern"><p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p></div><div class="note danger modern"><p>如果你是搭建环境时按照默认配置选项完成,就请不要再进行添加环境变量了,否则会导致出现以下报错问题</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E4%B8%8D%E8%A6%81%E5%B0%9D%E8%AF%95,%E6%9C%89%E4%BA%86%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%BF%98%E8%A6%81%E6%B7%BB%E5%8A%A0.png"> </p><div class="tip "><p>那以上关于环境变量的问题,也有第二种解决的方法</p></div><div class="note default modern"><ol><li>第二种方法就是变相的直接用npx采取执行命令</li><li>以下格式后面的xxx替换成你想执行的Hexo指令即可(这种方式适用于懒同学)</li><li>那其实,我还是更推荐各位按照教程,安装环境时选择默认的安装配置项(一步到位)</li><li>那按照以上的问题,我们用下面的指令解决一下</li><li>依旧是从Hexo博客根目录下打开<span class='p red'>Git客户端</span>,再把指令粘贴进<span class='p red'>Git客户端</span>里,然后换成记得把npm hexo xxx 换成 npm hexo init 回车即可</li></ol></div><div class="note modern"><p>npx hexo xxx (npx 命令规范的格式)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E9%87%87%E7%94%A8npx%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.png"> </p>              </div>            </details><h3 id="启动Hexo博客"><a href="#启动Hexo博客" class="headerlink" title="启动Hexo博客"></a>启动Hexo博客</h3><div class="tip key"><p>在生成完后博客,也是时候该启动了。</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">s</span></span><br></pre></td></tr></table></figure><div class="note primary flat"><p>我们把上面的指令复制一下<br>粘贴到我们的<span class='p red'>Git客户端</span>中<br>然后,按下回车键,请耐心等待启动。</p></div><div class="tip "><p>这样<span class='p red'>Hexo博客</span>,就启动成功啦！<br>访问地址就是以下的内容。</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http://localhost:4000</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>首先,我们得怎么访问呢？<br>那当然是得，在浏览器上啦<br>通过浏览器，呈现出<span class='p red'>Hexo博客</span>的样子<br>那我们就得先把上面的地址复制一下<br>然后去随便找个浏览器,即可</p></div><h3 id="访问Hexo博客"><a href="#访问Hexo博客" class="headerlink" title="访问Hexo博客"></a>访问Hexo博客</h3><div class="tip warning"><p>粘贴进<span class='p red'>Git客户端</span>中,然后进行回车访问即可。</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E5%8D%9A%E5%AE%A2%E9%93%BE%E6%8E%A5.png"> </p><div class="tip success"><p>这样就进入<span class='p red'>Hexo博客</span>的本体了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%88%9D%E6%AC%A1%E8%BF%9B%E5%85%A5Hexo%E5%8D%9A%E5%AE%A2.png"> </p><div class="tip cogs"><p>但是不是,觉得的这样的<span class='p red'>Hexo博客</span>,未免有些太单调了些呢？<br>那来看看，下面增添<span class='p red'>Hexo主题</span>吧</p></div>              </div>            </details><h3 id="安装Hexo主题"><a href="#安装Hexo主题" class="headerlink" title="安装Hexo主题"></a>安装Hexo主题</h3><details cyan><summary> 点击查看让Hexo增添可玩性(步骤八) </summary>              <div class='content'>              <div class="note pink icon modern"><i class="note-icon fas fa-car-crash"></i><p>这里我们就暂时只讲,如何去快速上手进行安装<span class='p blue'>butterfly(Hexo主题)</span></p></div><h3 id="butterfly主题介绍"><a href="#butterfly主题介绍" class="headerlink" title="butterfly主题介绍"></a>butterfly主题介绍</h3><details yellow><summary> butterfly主题介绍(了解) </summary>              <div class='content'>              <div class="note info modern"><p>其次<span class='p blue'>butterfly</span>分为两个版本,一个是稳定版(适合萌新)、一个是测试版(版本会高一些)<br>当然了<span class='p blue'>butterfly主题</span>也是一个可玩性极高的主题呢~<br>优点: 简洁、方便、性能高、可用性强<br>作者: Jerry</p></div>              </div>            </details><h3 id="butterfly主题下载地址"><a href="#butterfly主题下载地址" class="headerlink" title="butterfly主题下载地址"></a>butterfly主题下载地址</h3><div class="tabs" id="github"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github-1">Github(推荐)</button></li><li class="tab"><button type="button" data-href="#github-2">Gitee(推荐)</button></li><li class="tab"><button type="button" data-href="#github-3">npm下载链接</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github-1"><div class="note info flat"><p>安装稳定版 (推荐萌新)</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">-b</span> <span class="string">master</span> <span class="string">https://github.com/jerryc127/hexo-theme-butterfly.git</span> <span class="string">themes/butterfly</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>安装测试版 (推荐大佬)<br>但是测试版,会存在一下bug，所以如果不折腾的话,就选择稳定版吧~</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">-b</span> <span class="string">dev</span> <span class="string">https://github.com/jerryc127/hexo-theme-butterfly.git</span> <span class="string">themes/butterfly</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github-2"><div class="note info flat"><p>安装稳定版 (推荐萌新)</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">-b</span> <span class="string">master</span> <span class="string">https://gitee.com/iamjerryw/hexo-theme-butterfly.git</span> <span class="string">themes/butterfly</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>安装测试版 (推荐大佬)<br>但是测试版,会存在一下bug，所以如果不折腾的话,就选择稳定版吧~</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">-b</span> <span class="string">dev</span> <span class="string">https://gitee.com/iamjerryw/hexo-theme-butterfly.git</span> <span class="string">themes/butterfly</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github-3"><div class="note success no-icon flat"><p>安装npm版 (推荐大佬)</p><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>Hexo 5.0.0以上版本</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>Hexo 5.0.0以下版本</p>            </div>如果使用npm安装主题的话，是不会直接在你的主题文件夹的生成的。而是会在你的博客主文件夹当中的,node_modules文件夹中下生成node_modules: 插件目录 </div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">i</span> <span class="string">hexo-theme-butterfly</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details red><summary> 其它主题 (等待更新) </summary>              <div class='content'>              <div class="note primary modern"><p>如果你有喜欢的别的主题可以去这里看看~</p></div><div class="tag link"><a class="link-card" title="Hexo主题" href="https://hexo.io/themes/"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/favicon.webp"/></div><div class="right"><p class="text">Hexo主题</p><p class="url">https://hexo.io/themes/</p></div></a></div>              </div>            </details><details ><summary> 可能下载失败的原因 (了解) </summary>              <div class='content'>              <div class="note warning flat"><p>可能你会出现以下的问题<br>所以请详细看解决方法</p></div><div class="note info modern"><p>(当你进行下载主题的时候,有的时候会出现报错)<br>(说实话最近像<span class='p blue'>Hexo博客</span>初始化失败、上传失败、主题下载失败,这都太正常了)<br>(那Github宕机习惯就好,这种情况你再试着重新下一遍就好)<br>(如果还是报错的话,就接着重新下最后总会好的)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0.png"> </p>              </div>            </details><div class="note success no-icon flat"><ol><li>我们得怎么进行安装呢？</li><li>当然得是先确定要安装哪个版本</li><li>这里先只讲安装稳定版</li><li>先要复制稳定版主题的下载地址</li><li>接着依旧是打开我们的<span class='p red'>Git客户端</span></li><li>把地址右键粘贴复制进去</li><li>然后回车,耐心等待就可以啦</li></ol></div><div class="tip success"><p>以下就是下载完成的状态了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/butterfly%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png"> </p><h3 id="安装主题渲染器"><a href="#安装主题渲染器" class="headerlink" title="安装主题渲染器"></a>安装主题渲染器</h3><details red><summary> butterfly主题渲染器(必装) </summary>              <div class='content'>              <div class="tip cogs"><p>那肯定会人好奇啊,为什么要安装这个主题渲染器呢？<br>如果不安装主题的渲染器,就像Hexo失去了指令集不能执行指令一样<br>但安装了这个渲染器因此<span class='p red'>butterfly主题</span>也可以完美的渲染出来了</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-pug</span> <span class="string">hexo-renderer-stylus</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><div class="tip key"><p>把以上的指令复制到% span red, Git客户端%}中<br>然后粘贴进去进行回车,接着耐心等待完成即可</p></div><div class="tip success"><p>这样Hexo渲染器就安装好了,以下就是安装完整后返回的结果</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%AE%89%E8%A3%85Hexo%E6%B8%B2%E6%9F%93%E5%99%A8.png"> </p>              </div>            </details><h3 id="应用butterfly主题"><a href="#应用butterfly主题" class="headerlink" title="应用butterfly主题"></a>应用butterfly主题</h3><details blue><summary> 应用Hexo主题(必看) </summary>              <div class='content'>              <div class="tip home"><p>应用主题的话,首先在你博客根目录文件夹下找到 _config.yml 文件,然后我们再双击点击进去</p></div><div class="tip warning"><p>如果你没装编辑器的话,你这时候打开_config.yml这个文件,它是会去寻问你要以什么方式来打开它<br>我们这里就先以Visual Studio Code来进行编辑了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/Hexo%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%89%93%E5%BC%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"> </p><div class="note info modern"><ol><li>进来以后,虽然是有很多配置项,但暂时不需要去管(以后我在新文章中讲).</li><li>这里,我们直接Ctl+f进行搜索theme配置项就可以啦.</li></ol></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E6%90%9C%E7%B4%A2Hexo%E4%B8%BB%E9%A2%98%E9%A1%B9.png"></p><div class="note primary no-icon flat"><p>那跳转到theme主题配置项这里</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E6%89%BE%E5%88%B0%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E9%A1%B9.png"></p><div class="note success modern"><p>再将以下配置项中复制,粘贴到你theme配置项进行替换即可</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%BA%94%E7%94%A8butterfly%E4%B8%BB%E9%A2%98.png"></p><div class="tip bolt"><p>最后,在<span class='p red'>Git客户端</span>中输入指令hexo s(本地预览)就好啦</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%90%AF%E5%8A%A8Hexo%E5%8D%9A%E5%AE%A2.webp"></p>              </div>            </details><h3 id="Hexo整合指令"><a href="#Hexo整合指令" class="headerlink" title="Hexo整合指令"></a>Hexo整合指令</h3><details green><summary> Hexo整合指令(了解) </summary>              <div class='content'>              <div class="note info modern"><p><span class='p blue'>Hexo</span>指令繁多,为此 我整理了日常方便使用的指令</p></div><div class="note warning no-icon flat"><ol><li>hexo init &gt; Hexo会在默认的当前文件夹新建博客。</li><li>hexo new [布局名称] 标题 (新建文章)</li><li>hexo clean &gt; 可缩写成 hexo cl (进行清理缓存)</li><li>hexo generate &gt; 可缩写成 hexo g (生成静态页面文件)</li><li>hexo server &gt; 可缩写成 hexo s (启动部署Hexo博客,在本地进行测试)</li><li>hexo deploy &gt; 可缩写成 hexo d (可以部署到Github、Gitee…)<br>(但是前提,必须要安装这个插件。)</li></ol></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">创建的参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p>-p, –path 自定义新文章的路径<br>-r –replace 检测是否有相同的文章如果有，会替换掉<br>–s –slug 文章的slug,作为新文章的文件名和发布稿后的URL</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h3 id="主题趣味插件"><a href="#主题趣味插件" class="headerlink" title="主题趣味插件"></a>主题趣味插件</h3><details yellow><summary> 主题附属插件 (了解) </summary>              <div class='content'>              <div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>以下所有附属插件<br>可根据自己的需求<br>来进行安装</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line"># nib css支持插件，如无需求，可跳过</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line"># RSS订阅支持插件，如无需求，可跳过</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"># sitemap生成插件，帮助搜索引擎抓取，如无需求，可跳过</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line"># 网页端hexo文档管理插件，如无需求，可跳过</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="更新主题指令"><a href="#更新主题指令" class="headerlink" title="更新主题指令"></a>更新主题指令</h3><details blue><summary> 更新主题(详读) </summary>              <div class='content'>              <div class="note info modern"><p>相信很多人,都喜欢追随版本的更新<br>那该如何去更新,主题的版本呢？</p></div><div class="tip bell"><p>当前 butterfly主题的最新版本: 3.7.8 (随时保持自动更新) </p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">pull</span></span><br></pre></td></tr></table></figure><div class="tip cogs"><p>其实,更新主题的方法也不难<br>就是在<span class='p blue'>Hexo博客</span>主题文件夹的根目录下<br>打开<span class='p red'>Git客户端</span>，把上面的指令复制一下<br>粘贴进<span class='p red'>Git客户端</span>里<br>回车后，耐心等待就好~</p></div><div class="tip error"><p>我们这边，帮大家试了一下<br>因为现在已经就是，最高版本了<br>所以没办法，再更新。</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%96%B0%E6%8F%90%E7%A4%BA.png"></p><div class="tip warning"><p>但是,更新后我们butterfly主题下的_config.yml配置文件就会被覆盖掉,那如何更新后不会重合呢？</p><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>版本更新会把主题配置文件中修改的东西</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>全部覆盖掉</p>            </div></div><details yellow><summary> 防止版本更新覆盖 </summary>              <div class='content'>              <ol><li><p>首先打开<span class='p blue'>Hexo博客</span>主题文件夹，然后把文件夹下的_config.yml复制到<span class='p blue'>Hexo</span>的根目录下</p></li><li><p>然后我们把_config.yml的文件名修改成 _config.butterfly.yml</p></li><li><p>但是没把_config.yml的文件名字进行修改,直接复制过来就会出现重合的问题<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E9%87%8D%E5%A4%8Dcofing%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98.png"></p></li><li><p>因此可以先把它复制到桌面，然后修改名字<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%B2%98%E8%B4%B4%E7%9A%84%E6%A1%8C%E9%9D%A2%E4%B8%8A.png"></p></li><li><p>然后再把它拖到根目录下，就可以啦！</p></li></ol><div class="note warning flat"><p>之后,就在_config.butterfly.yml 去修改主题里的内容就可以啦~<br>无论,怎么样更新,都不会被覆盖了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%88%9B%E5%BB%BA%E9%98%B2%E8%A2%AB%E8%A6%86%E7%9B%96%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.webp"></p>              </div>            </details>              </div>            </details>              </div>            </details><h3 id="Hexo部署到Github"><a href="#Hexo部署到Github" class="headerlink" title="Hexo部署到Github"></a>Hexo部署到Github</h3><details yellow><summary> 点击查看如何部署Github(步骤九) </summary>              <div class='content'>              <details green><summary> 注册Github账号 (第一步) </summary>              <div class='content'>              <h3 id="开始注册Github账号"><a href="#开始注册Github账号" class="headerlink" title="开始注册Github账号"></a>开始注册Github账号</h3><div class="note simple"><ol><li>如果没有<span class='p red'>Github账号</span>的话</li><li>一定要先注册一个<span class='p red'>Github账号</span></li><li>为了给大家在教程中更直观的展示</li><li>这里就再创建一个新的<span class='p red'>Github账号</span></li></ol></div><div class="note simple"><div class="tag link"><a class="link-card" title="Github官网" href="https://github.com/"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Github.png"/></div><div class="right"><p class="text">Github官网</p><p class="url">https://github.com/</p></div></a></div> </div>   <div class="note simple"><p>那首先我们先来到了注册页面下</p></div> <p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Register.png"></p><details ><summary> 填写信息(翻译) </summary>              <div class='content'>              <div class="note yellow no-icon flat"><p>Username &gt; 你要注册的ID是什么(用户名)<br>Email address &gt; 你要注册的邮箱地址(方便收到信息)<br>Password &gt; 你的账户密码是什么? (设置)<br>Email preferences &gt; 给你发送<span class='p red'>Github</span>产品的更新内容。<br>Veify your account &gt; 验证问题<br>(其实,由此可见Github的注册还是不难的)</p></div>              </div>            </details><details red><summary> 注册Github账号可能出现的问题(详读) </summary>              <div class='content'>              <ol><li>可能有的用户,在进行注册<span class='p red'>Github账号</span>时会出遇到”Unable to verify your captcha response”报错<br>其实通俗理解就是: 确保您的浏览器受支持。如果您的浏览器不受支持，请升级浏览器或安装支持的浏览器,如果你想详细了解请看这里<a href="https://sourl.cn/mgxUZh">GitHub注册遇到的问题</a></li></ol><ul><li>我们这里的解决方法是: 升级我们当前浏览器即可：如果你是用的微软自带的Microsoft edge浏览器就更新Microsoft edge即可,如果你是chrome那更新chrome即可。</li></ul><ol start="2"><li>因为Github被”七色光联盟”攻击,导致网络线路被污染,那同样也会使Github访问、包括下载的线路变得缓慢了许多</li></ol><ul><li>我们这里的解决方法是: 1.采用把Github域名添加到Hosts,教程篇呢是来自<a href="https://akilar.top/posts/61b3e163/">店长采用访问 github 或部署在 gitpage 上的网站过慢的解决方案</a> 2.采用科学上网的方法<a href="https://lb.ckes123.cc/">科学上网工具</a> 说实话我不太推荐,像科学上网软件这种东西,因为它容易污染居家的网络宽带,因为深有体会过。</li></ul>              </div>            </details><div class="note primary flat"><p>我们将注册信息,填写完毕后要记得下面有一个验证问题<br>(有的时候,直观来讲这个验证问题,有点大病你懂的)<br>(因此,你可以通过刷新注册页面,来防止出现大病问题)</p></div><div class="tip success"><p>接下来点击按钮<span class='p red'>Create account</span>(创建账号)即可,然后耐心等待会自动跳转</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%A1%AB%E5%86%99%E5%AE%8C%E6%AF%95%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF.png"></p><div class="note warning flat"><p>好了,这样就注册好了,就会自动跳转到Github新用户的欢迎界面</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BF%9B%E5%85%A5Github%E6%96%B0%E7%94%A8%E6%88%B7%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2.png"></p><div class="note default flat"><p>接下来,我们可以去到我们的个人主页看看啦~<br>先点击右上角的头像,就会出现一个列表<br>找到你的用户名: AglaiaLight(这里是我的用户名)<br>然后点击一下它</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%82%B9%E5%87%BBGithub%E4%B8%AA%E4%BA%BA%E5%A4%B4%E5%83%8F.png"></p><div class="note default flat"><p>接着,这样就进到了个人主页了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BF%9B%E5%85%A5%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5.png"></p><div class="note success modern"><p>但是,你认为此刻就完事了吗？不不不,还需要去验证邮箱<br>打开你的QQ邮箱,然后就会收到一封信,点击验证通过就可以啦</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1.png"></p><div class="note info modern"><p>验证完后返回Github官网,这样就可以完全进入了<br>那这里的验证就是什么呢? 你也可以通俗理解为<br>你得通过它的邮箱验证,才能完全向你开放功能</p></div><div class="note success modern"><p>这样Github账号,就算是彻底注册了.</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E6%AD%A3%E5%BC%8F%E5%8A%A0%E5%85%A5Github.png"></p>              </div>            </details><details blue><summary> 设置Git客户端与Gihub互通(第二步) </summary>              <div class='content'>              <h3 id="设置Git客户端的密钥"><a href="#设置Git客户端的密钥" class="headerlink" title="设置Git客户端的密钥"></a>设置Git客户端的密钥</h3><div class="tip "><p>以下完成密钥配置内容是和Github仓库对接最重要的因素</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#记住以下的配置信息,要一条一条的进行复制和粘贴进Git客户端</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;你的Github用户名&quot;</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;你的Github邮箱&quot;</span></span><br></pre></td></tr></table></figure><div class="note default modern"><p>提醒: <span class='p red'>在user.name 后 有一个空格！这一定要记住</span><br>如果你这里没有空格的话,它的这些数据都不会存入<span class='p gray'>Git</span>中<br>所以这里一定要注意,不然的话在我们后面部署的时候会报错: ERROR Deployer not found: <span class='p gray'>Git</span>(用户名和邮箱配置错误)<br>为了防止报错出现问题,一定要<span class='p red'>仔细、细心.</span></p></div><div class="tip warning"><p>绑定信息后,我们还需要进行生成SSHKey的公钥<br>请按照以下顺序执行指令,完成配对.</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一下新的公钥,公钥的作用可以看成回家打开门的钥匙 (1)</span></span><br><span class="line"><span class="string">ssh-keygen</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">-C</span> <span class="string">&quot;你的Github邮箱&quot;</span></span><br><span class="line"><span class="comment"># 查看公钥的指令 (2)</span></span><br><span class="line"><span class="string">less</span> <span class="string">~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure><div class="note default modern"><p>我们将刚才获得到的SSHKey公钥复制一下<br>然后生成完记得按ctrl + z 即可关闭生成密钥页面<br>接着返回Github,来到Github欢迎界面<br>依旧是点击我们右上角的头像旁边的按钮(↓)</p></div><div class="note info modern"><p>接下来,点击我们倒数第二个按钮<span class='p red'>Settings</span>(设置)</p></div> <p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E7%82%B9%E5%87%BB%E8%BF%9B%E5%85%A5Github%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE.webp"></p><div class="note purple icon modern"><i class="note-icon far fa-hand-scissors"></i><p>然后,就可以进入Github用户个人的设置界面啦</p></div><div class="note warning modern"><p>Account settings &lt; 账户设置<br>Profile &lt; 可以设置账号的简介之类啦<br>Account &lt; 对账号进行修改用户名之类的<br>Appearance &lt; 可以进行设置你观感体验上的不同<br>Account security &lt; 这里是进行关于你账号安全的<br>Billing &amp; plans &lt; 这里就是查看你在Github上的消费记录<br>Security log &lt; 这里就是关于你账号安全日志啦,看看你账号最近的发生的改变<br>Security &amp; analysis &lt; 这里就是进行对你仓库的分析与配置安全<br>Emails &lt; 这里是关于你账号绑定的邮箱<br>Notifications &lt; 这里是关于你Github的情况，推送到邮箱<br>SSH and GPS keys &lt; 现在就是设置SSHKey公钥的地方,也是与Github对接的唯一关键<br>Repositories &lt; 这里可以为你仓库设置默认的主分支<br>Packages &lt; 这里是你关于你创建的包，可以进行恢复<br>Organizations &lt; 这里就类似于,你加入一个群<br>Saved replies &lt; 就相当于把你想反馈的内容保存成了一个模板,然后在进行和大佬项目反馈BUG的时候，可以直接调用<br>Applications &lt; 这里是关于，你Github绑定的应用</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E5%85%A5Github%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE.webp"></p><div class="note default modern"><p>以上这里直接选择到按钮 SSH and GPS keys 就可以了<br>然后看到右面,有两个按钮<br>SSH keys: SSHKey公钥<br>GPS keys: GPG密钥</p><p>首先这里直接选择第一个SSH keys即可<br>但是我们这里要给添加的密钥是 SSHKey公钥的<br>对于第二个,大概是GPG签名算法之类的<br>如需要了解还请自行搜索关键内容</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E5%85%A5%E5%88%B0%E8%AE%BE%E7%BD%AESSHKEY%E7%95%8C%E9%9D%A2.webp"></p><div class="note default modern"><p>进来以后,我们有两个对话框,一个是小的,一个是大的<br>小的呢填写的就是Title(密钥的名字) 大的呢填写的就是Key(公钥)</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E8%A1%8C%E5%A1%AB%E5%86%99SSHKEY%E4%BF%A1%E6%81%AF.webp"></p><div class="note info modern"><p>那个标题可以随便写,然后把我们电脑生成的SSHKey公钥粘贴进去即可<br>最后记得要点击提交哦(Add SSH key &lt; 添加SSH公钥)<br>完成以上的步骤之后,就可以进行下一步了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E8%A1%8C%E5%A1%AB%E5%86%99SSKEY.webp"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接着进行对我们SSHKey公钥绑定测试(4)</span></span><br><span class="line"><span class="comment"># 把以下的指令粘贴到git客户端中即可</span></span><br><span class="line"><span class="string">ssh</span> <span class="string">-T</span> <span class="string">git@github.com</span></span><br></pre></td></tr></table></figure><div class="note info modern"><p>以下客户端当中,就是用上面的指令进行测试<br>不过在你触发指令后,它要询问你: Are you sure you want to continue connecting?(是否确实要继续连接)<br>我们这里一定要记得输入yes,如果输入no的话就得断开连接,重新进行测试了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%B5%8B%E8%AF%95%E8%BF%9E%E9%80%9A%E6%80%A7.webp"></p><details red><summary> 测试连接可能出现的BUG(详读) </summary>              <div class='content'>              <ol><li>可能会出现以下情况,其实就是在当前网络环境中,本地端口22被占用</li></ol><ul><li>ssh: connect to host gitee.com port 22: Connection timed out</li></ul><ol start="2"><li>所以我们这边的解决办法: 把要测试的端口修改</li></ol><div class="note info modern"><p>所以我们这里直接改为: -p 443<br>如果！443也被占用,我们这边可以尝试切换8443、80…</p></div><ol><li>还有如果我们没配置好公钥,直接使用指令 ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#x68;&#x75;&#98;&#46;&#99;&#111;&#109;</a></li><li>就会出现以下图内的情况,所以一定要仔细细心！</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E7%BB%91%E5%AE%9A%E5%85%AC%E9%92%A5%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E7%9A%84%E6%8A%A5%E9%94%99.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ssh</span> <span class="string">-T</span> <span class="string">-p</span> <span class="number">443</span> <span class="string">git@ssh.github.com</span></span><br></pre></td></tr></table></figure>              </div>            </details><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下即为与Github连接测试成功的消息</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;github.com (xxx.xx.xxx.xxx)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="string">This key is not known by any other names</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>github.com<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Hi AglaiaLight! You&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>              </div>            </details><details red><summary> 创建Github仓库(第三步) </summary>              <div class='content'>              <h3 id="开始创建Github仓库"><a href="#开始创建Github仓库" class="headerlink" title="开始创建Github仓库"></a>开始创建Github仓库</h3><div class="tip "><p>首先从自己的Github个人主页,找到右上角的 <span class='p red'>+</span></p><p>然后找到 New repository 点击进入</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png"></p><div class="tip warning"><p>就会来到一个，填写创建仓库的页面</p></div><div class="note info no-icon flat"><p>Owner* &gt; 所有人<br>Repository name* &gt; 仓库的名字<br>Description &gt; 备注当前仓库</p><div class='checkbox checked'><input type="radio" checked="checked"/>           <p>Public &gt; 别的Github用户也可以访问</p>           </div><div class='checkbox checked'><input type="radio" checked="checked"/>           <p>Private &gt; 私有</p>           </div>--------------------------------------------<div class='checkbox Add a README file > 给仓库里'><input type="checkbox" />           <p>添加一个介绍内容</p>           </div><div class='checkbox'><input type="checkbox" />           <p>Add .gitinore &gt; 忽略文件</p>           </div><div class='checkbox'><input type="checkbox" />           <p>Choose a license &gt;</p>           </div></div><details yellow><summary> 静态页面仓库的命名格式(了解) </summary>              <div class='content'>              <div class="note primary modern"><ol><li>其实静态页面仓库的命名格式(↓)</li></ol></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下就是命名规范</span></span><br><span class="line"><span class="string">你的Github用户名.github.io</span> </span><br></pre></td></tr></table></figure><div class="note modern"><ol><li>相比肯定就有同学会疑惑了说: “可以不用吗？我非得就按照这个命名规范来吗？”</li><li>答: 其实不是的,在这里的规范,是为了给那些喜欢遵守标准的人使用(推荐)</li><li>答: 就好比，写Java代码要用驼峰规则一样,用中文声明一个变量、类可以吗？可以,当然可以</li><li>答: 但是不规范！就会出现问题！</li></ol></div><div class="note success modern"><p>但静态页面的仓库,有着两种类型<br>第一种呢所属于就是User/Organization Pages<br>第二种呢就是Project Pages的静态站点</p><hr><p>创建静态页面进行访问,就必须要遵从规则<br>因此User Pages静态站点的仓库必须要以: 你的Github用户名.github.io的命名规则为标准进行创建仓库<br>也因此要想使用User Pages 必须通过 https://你的Github用户名.github.io 才能访问</p><hr><p>第二种Projects Pages也是要通过 https://你的Github用户名.github.io/projectname才能访问哦~</p></div><div class="note warning modern"><p>如果你还想了解查阅更多即可去查看: <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">GitHub Pages Basics / User, Organization, and Project Pages</a></p></div>              </div>            </details><div class="note default modern"><p>看完以上的教程,相信也差不多了<br>我们接下来,进行填写仓库的信息</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%AE%BE%E7%BD%AE%E4%BB%93%E5%BA%93%E4%BF%A1%E6%81%AF.png"></p><div class="note warning modern"><p>我们就按照以上的规范,进行填写信息<br>Repository name: AglaiaLight.github.io<br>Description: 文章的测试博客</p><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>Public</p>            </div></div><div class="note success modern"><p>好了,这里就已经按照以上的规范<br>填写完创建仓库的信息了<br>接下来点击一下按钮Create repository(创建存储库)即可</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%A1%AB%E5%86%99%E5%AE%8C%E6%88%90.png"></p><div class="tip bell"><p>1.创建完之后,它会自动跳转进仓库内<br>2.好了,现在就进入到仓库内了</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E5%85%A5%E4%BB%93%E5%BA%93.png"></p><div class="tip "><p>按照以上的内容,进行完成后<br>既可以接着往下去看了哦~</p></div>              </div>            </details><details yellow><summary> 安装Hexo部署插件(第四步) </summary>              <div class='content'>              <h3 id="安装Hexo部署插件"><a href="#安装Hexo部署插件" class="headerlink" title="安装Hexo部署插件"></a>安装Hexo部署插件</h3><div class="note success modern"><p>相信看到这的同学,早已经开始疲惫了吧?<br>但即将抵达彼岸,又怎能半途而废呢。<br>再坚持一下啦，马上就接近尾声了。</p></div><div class="note info modern"><p>首先要安装,部署Github静态页面的插件<br>它的名字叫: hexo-deployer-git</p></div><div class="note orange icon modern"><i class="note-icon fas fa-battery-half"></i><p>请把以下指令粘贴到<span class='p gray'>Git</span>客户端中<br>按下回车即可,请耐心等待安装完毕</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure><div class="note warning modern"><p>那以下<span class='p gray'>Git</span>客户端中,就是安装完插件后的结果</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png"></p>              </div>            </details><details ><summary> 开始Hexo博客部署(第五步) </summary>              <div class='content'>              <h3 id="开始Hexo博客的部署"><a href="#开始Hexo博客的部署" class="headerlink" title="开始Hexo博客的部署"></a>开始Hexo博客的部署</h3><div class="tip cogs"><ol><li>来到此教程篇章的尾声</li><li>我很感谢大家,能坚持到这里</li><li>因此,我们废话不多说开始吧</li><li>进行最后一步Github部署</li></ol></div><div class="note info no-icon flat"><p>部署Github的三要素:</p><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>完成配对Github的SSHKey公钥</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>安装部署hexo-deployer-git插件</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>填写默认配置文件的部署信息</p>            </div>(以上三点需求确保无误,才可以)(若上诉需求有一条不对,那么就会失败)</div><div class="note warning no-icon flat"><p>(但三要素,我们还却其一)</p><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>填写默认配置文件的部署信息</p>            </div><ol><li>首先要找到我们Hexo博客的主目录</li><li>接着来到我们的主目录下后</li><li>即可看到主目录文件夹下的_cofing.yml</li><li>这里依旧直接打开即可(如果你没有编辑器,可以暂时用默认的记事本进行修改配置项)</li></ol></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%89%93%E5%BC%80%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%BC%96%E8%BE%91%E5%99%A8.png"></p><div class="note success modern"><ol><li>进来以后,虽然是有很多配置项,但暂时不需要去管(以后我会讲).</li><li>这里,我们直接用Ctl+f进行搜索关键字deploy就可以啦.</li></ol></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/hexo%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AE%BE%E7%BD%AE.png"></p><div class="tip "><p>你输入到关键字,接着会跳转到部署配置项这里<br>依图所示deploy就是需要修改的部署配置项<br>直接复制框配置项的样式,然后粘贴进去即可</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment (部署静态站点需要配置)</span></span><br><span class="line"><span class="comment">## Docs: https://zespia.tw/hexo/docs/deploy.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> <span class="comment">#部署类型</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">git@github.com:你的Github用户名/你的Github用户名.github.io.git</span>  <span class="comment"># 这里只需要把用户名添加上就可以啦,两个记得要统一！</span></span><br><span class="line">      <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#这里可以是master分支 也可以是main</span></span><br></pre></td></tr></table></figure><div class="note default modern"><p>提醒: 在yml中对缩进有很严格的要求,如果不对就会导致失败、报错<br>所以在deploy前面不要有空格,而所有字母后面有冒号的都要有空格！</p></div><div class="note success modern"><p>好了,以下就是按照第一种方法的配置项完成了修改。</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%86%99%E5%85%A5%E9%83%A8%E7%BD%B2%E4%BF%A1%E6%81%AF.png"></p><div class="note warning modern"><p>以下就是 Deployment 配置项第二种写法<br>当然了以上和以下的二种方法<span class='p red'>任选其一即可</span></p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment (部署静态站点需要配置)</span></span><br><span class="line"><span class="comment">## Docs: https://zespia.tw/hexo/docs/deploy.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> <span class="comment">#部署类型</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:你的Github用户名/你的Github用户名.github.io.git,master</span>  <span class="comment"># 这里只需要把用户名和你的仓库的类型填写即可!!</span></span><br></pre></td></tr></table></figure><div class="note default modern"><p>提醒: 在yml中对缩进有很严格的要求,否则不对就会导致失败、报错<br>因此在deploy前面不要有空格,而字母后面有冒号的都要有空格！</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%86%99%E5%85%A5%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E9%A1%B9%E4%BF%A1%E6%81%AF.png"></p><div class="note success modern"><p>好了,以上就是按照第二种方法的配置项完成了修改。</p></div><details cyan open><summary> 开始部署上传(最后一步) </summary>              <div class='content'>              <div class="tip warning"><p>以上所有的内容,请务必仔细、细心即可。 </p></div><ol><li>首先,还是在博客文件夹下,需要右键点击Git Bash Here 打开<span class='p gray'>Git</span>客户端</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E5%8F%B3%E9%94%AE%E6%89%A7%E8%A1%8C%E9%83%A8%E7%BD%B2.png"></p><ol start="2"><li>接下来,就进入到<span class='p gray'>Git</span>客户端中了</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BD%BD%E5%85%A5Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%AD.png"></p><details yellow><summary> 部署指令的两种方法(建读) </summary>              <div class='content'>              <ol><li>肯定有人很好奇,为什么这个我要单独放在一个折叠款下讲</li><li>因为这里有两种方法</li><li>接下来,请见以下的两种方法 </li></ol><div class="note info modern"><p>今天写文章的时候,突发奇想到这个问题,就去问了<a href="https://akilar.top/">店长</a><br>我: 其实 deploy 部署 的时候 也没有必要用到 hexo clean吧?<br>我: 因为hexo clean  清理缓存 需要上传时，要用到嘛？<br><a href="https://akilar.top/">店长</a>: 确实不一定要<br><a href="https://akilar.top/">店长</a>: 只有改了配置文件才需要<br>(所以接下来,请看以下的两种方法吧)</p></div><div class="note success modern"><p>这是第一种方法<br>其实你修改了配置文件,不推荐直接用这个方法<br>hexo generate: 把源码文件直接生成为静态文件<br>hexo deploy: 把静态文件通过确定的配置信息推到Github指定仓库中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BE%93%E5%85%A5%E6%8C%87%E4%BB%A4.png"></p><div class="note success modern"><p>以上指令,也可缩写成以下样子</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BE%93%E5%85%A5%E6%8C%87%E4%BB%A42.png"></p><div class="tip warning"><p>接下来,请看第二种方法</p></div><div class="note success modern"><p>第二种指令方法<br>加入了clean是为了清除缓存所用的<br>所以,当你修改了本地的配置文件,记得加上这个指令,效果会更好哦~<br>hexo clean: 把本地的缓存文件(db.json) 和一生成的静态文件(public)给清理掉<br>hexo generate: 把源码文件直接生成为静态文件<br>hexo deploy: 把静态文件通过确定的配置信息推到Github指定仓库中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BE%93%E5%85%A5%E6%8C%87%E4%BB%A43.png"></p><div class="note success modern"><p>以上指令,也可缩写成以下样子</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">cl</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BE%93%E5%85%A5%E6%8C%87%E4%BB%A44.png"></p><div class="note success modern"><p>当你以上所有内容看完后<br>可以接着往下进行了</p></div>              </div>            </details><ol><li>当你部署指令的两种方法看完之后</li><li>我们这里只选择,第一种指令方法</li><li>不过你,这只需要请选择一种方式,然后进行回车等待推送到Github仓库即可</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E4%B8%8A%E4%BC%A0%E6%83%85%E5%86%B5.png"></p><div class="note success modern"><p>接下来,返回Github自己创建的仓库,去查看一下<br>但还是先要打开Github</p></div><div class="note simple"><div class="tag link"><a class="link-card" title="Github官网" href="https://github.com/"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Github.png"/></div><div class="right"><p class="text">Github官网</p><p class="url">https://github.com/</p></div></a></div> </div>   <div class="note info modern"><ol start="2"><li>然后进入到Github的主页面<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BF%9B%E5%85%A5%E5%88%B0%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2.png"></li><li>依旧是先点击我们的头像</li><li>然后出现了一个列表,这里选择点一下自己的Github名字(AglaiaLight)即可~<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BF%9B%E5%85%A5%E4%B8%AA%E4%BA%BA%E7%95%8C%E9%9D%A2.png"></li><li>然后就会跳转到我们的个人界面里了</li><li>我们可以明显的看到有一个仓库(AglaiaLight.github.io)就是我们刚才第三步创建的</li><li>我们点进去查看即可<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%AF%95.png"></li><li>好了,现在进入到仓库里了</li><li>可以看到,仓库里存的就是刚才用”hexo generate”指令生成静态的文件<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E4%B8%8A%E4%BC%A0%E5%AE%8C%E6%AF%95.png"></li></ol></div><div class="note purple icon modern"><i class="note-icon far fa-hand-scissors"></i><p>嘿嘿都完成了后,我们就可以开始进行访问我们的博客啦<br>访问博客的统一地址: https://你的Github用户名.github.io<br>细心的同学,早已经发现这就是http链接加仓库名然后进行访问站点啦~</p></div><div class="note info modern"><p>终于大功告成了,GoGo我们快去试试怎么样吧~</p><ol><li>还是依旧先要打开浏览器<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%AE%BF%E9%97%AE%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80.png"></li><li>把刚才的访问地址粘贴进浏览器中</li><li>因为我们这边是<a href="https://aglaialight.github.io/">https://AglaiaLight.github.io</a></li><li>所以就粘贴这个啦~</li><li>好了已经粘贴进去了<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%B2%98%E8%B4%B4%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80.png"></li><li>当我们按下回车键的那一刹那</li><li>好了,算是彻底的结束啦~~ ！！！！<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90.png"></li></ol></div>              </div>            </details>              </div>            </details><details cyan><summary> 给Hexo博客添加域名(附加内容) </summary>              <div class='content'>              <h3 id="给Hexo博客绑定域名"><a href="#给Hexo博客绑定域名" class="headerlink" title="给Hexo博客绑定域名"></a>给Hexo博客绑定域名</h3><div class="note default modern"><p>我来开篇小章节哈~<br>毕竟好奇的同学已经开始疑问了<br>那我那些都弄完了后,我能不能用把我自己的域名进行绑定呢？<br>可以、当然可以、完全可以、非常可以,所以接下来开始讲解吧~</p></div><div class="tip success"><p>对于域名这个东西,我更推荐的是腾讯云,因为腾讯云的薅羊毛真的是太刺激啦~<br>在腾讯云新用户当中,是有一个给域名专门开展的活动, 那最便宜的价格是多少呢？<br>(只需要一块钱你就能买top域名一年,你没有听错)<br>(那这个活动只要不结束,其实你可以换着号注册,毕竟腾讯云是不会限制身份证认证的)<br>(那也就是说,每年都可以换一个腾讯号去注册一个top域名,仅需要一块钱)<br>(但是腾讯云的注册是限制手机号的,所以需要多备几个啦~)<br>(这样总计算下来,四舍五入白给)</p></div><div class="note info no-icon flat"><ol><li>第一步,我们要进行腾讯云注册账号: <a href="https://cloud.tencent.com/login?s_url=https://console.cloud.tencent.com/developer">注册地址在这里,把鼠标放在上面点击一下就可以啦</a></li><li>点击以上地址后,进入到了登录账号页面<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E8%B4%A6%E5%8F%B7.png"></li><li>因为我这里已经有账号了,所以直接用QQ登录</li><li>然后跳转到了用户界面中<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E8%B7%B3%E8%BD%AC.png"></li><li>接下来,可以前去购买域名了: <a href="https://cloud.tencent.com/act/domainsales?from=12643">购买域名地址在这里,把鼠标放在上面点击一下就可以啦</a></li><li>点击第五步的链接后,自动跳转到购买域名的界面啦(但是你要记得往下翻一翻哦~)<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%B4%AD%E4%B9%B0top%E5%9F%9F%E5%90%8D.png"></li><li>这个账号,已经买过了,所以就不能给大家展示啦,但是相信，大家一定都会吧~ (点击购买、进行搜索以xx后缀的域名、点击一键购买、跳转付款,就可以啦)</li><li>这里,其实你还可以去购买别的域名,但是top域名感觉更实惠点呢~</li><li>当购买完域名后你还得去完成域名信息设置模板,其实这个过程就是进行实名验证,然后实名验证通过后等待域名正常解析就可以啦</li><li>但是首先,我们先回到个人用户界面: <a href="https://console.cloud.tencent.com/developer">个人用户界面在这里,把鼠标放在上面点击一下就可以啦</a><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E7%99%BB%E5%BD%95%E8%85%BE%E8%AE%AF%E4%BA%91%E8%B7%B3%E8%BD%AC.png"></li><li>然后可以清楚的看到左上角的云产品↓,我们把鼠标图标轻轻地放在上面一下,就会出现一个界面</li><li>这样,就可以显示出来啦<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E4%BA%91%E4%BA%A7%E5%93%81%E7%95%8C%E9%9D%A2.png"></li><li>接下来,我们要在左上角搜索框内输入: 域名注册 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C.png"></li><li>然后搜索出来了,我们点击第一个域名注册就可以啦,然后它会自动跳转进域名管理界面!</li><li>以下就是跳转进域名管理界面啦 </li><li>这里在左边列表里,有很多功能可以清楚的看见</li><li>上面我们提到了,要完成域名信息设置模板,如果没有完成的话,这里的域名服务状态是不会先显示正常的</li><li>所以,这里先点一下左边列表中的域名信息模板<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%9F%9F%E5%90%8D%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2.png"></li><li>好了,跳转到信息模板以后,这里是要进行创建的</li><li>所以点击一下中间的新建模板按钮即可进行创建<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%A8%A1%E6%9D%BF.png"></li><li>就是这个,然后轻轻点一下就好(这里是张图,别被骗了嗷)~<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%AF%BC%E5%85%A5%E6%A8%A1%E6%9D%BF%E6%8C%89%E9%92%AE.png"></li><li>点击完新建模板后,会在当前页面跳转到一个填写模板中<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%88%9B%E5%BB%BA%E4%BF%A1%E6%81%AF%E6%A8%A1%E6%9D%BF.png"></li></ol><div class="tip warning"><p>用户类型: 个人用户/企业用户<br>域名所有者(中文): 您的名字<br>域名所有者(英文): 您的英文名<br>联系人(中文名): 联系人的名字<br>联系人(英文名): 联系人英文的名字<br>电子邮件: 您的e-mali邮箱地址<br>地区: 所在的国家/所在的省位/所在的城市<br>通信地址(中文): 您的地址<br>通信地址(英文): 您的英文地址<br>邮编: 您所在城市的邮编<br>手机：您的手机号<br>======================================================<br>域名所有者身份认证<br>证件类型: (护照、港澳居民来往内地通行证、台湾居民来往大陆通行证、外国人永久居留身份证、港澳居民住证、台湾居民居住证)然后你选一个就行啦<br>证件图片上传: 记得要有完整证件边框,不漏边边角角,然后图片格式为 JPG 或 JPEG ，大小 55 KB ~ 1 M 以内的彩色证照扫描件<br>证件号码: 就是您身份证的号码</p></div><ol start="23"><li>记得一一对照,然后认真填写,最后记得点提交哦~ </li><li>它这个最快的审核时间,我记得是半个小时到一个小时内吧,然后就会给你回复情况</li><li>但是前提,信息填写一定要正确无误！！！<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%8F%90%E4%BA%A4%E6%8C%89%E9%92%AE.png"></li><li>好了,以上就是关于域名信息设置模板的内容讲解,下面开始讲解怎样绑定域名了</li><li>首先要进行获取博客默认的<span class='p red'>ip</span>地址,我们这里可以用 <a href="https://baike.baidu.com/item/CMD%E5%91%BD%E4%BB%A4">CMD</a>、<a href="https://sourl.cn/mRV9pu">Git</a>、<a href="https://baike.baidu.com/item/Windows%20Power%20Shell/693789?fromtitle=PowerShell&fromid=1061700">PowerShell</a> 以上三个工具(我分别在三个文字中,都添加了百科资料链接方便你们去了解,你们需要了解哪个点一下就可以啦).</li></ol></div><details ><summary> 三种工具获取博客默认ip地址的方法 </summary>              <div class='content'>              <details yellow><summary> CMD(第一种) </summary>              <div class='content'>              <div class="note info modern"><ol start="28"><li>首先第一个工具: CMD </li><li>我们要在CMD中,用<span class='p red'>Ping</span>指令去获取博客默认的<span class='p red'>ip</span>地址</li><li>那博客的地址,相信大家都没忘吧,在创建仓库那个地方,仓库名就是呀！</li><li>所以这里直接拿过来 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/cmd%E4%B8%AD.png"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ping</span> <span class="string">您的Github用户名.github.io</span></span><br></pre></td></tr></table></figure></li><li>然后,我们这里的仓库地址是: AglaiaLight.github.io</li><li>以下就输入了: ping AglaiaLight.github.io</li><li>输入完以后,回车耐心等待就可以啦</li><li>然后就可以获取到<span class='p red'>ip</span>了,那当然我们这里是: 185.199.110.153<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/CMD%E4%B8%ADPing%E5%AE%8C%E4%BA%86.png"></li></ol></div>              </div>            </details><details yellow><summary> Git客户端(第二种) </summary>              <div class='content'>              <div class="note warning modern"><ol start="35"><li>首先第二个工具: Git</li><li>我们要在Git中,用<span class='p red'>Ping</span>指令去获取博客默认的<span class='p red'>ip</span>地址</li><li>那博客的地址,相信大家都没忘吧,在创建仓库那个地方,仓库名就是呀！</li><li>所以这里直接拿过来 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/Git%E4%B8%AD.png" alt=" "><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ping</span> <span class="string">您的Github用户名.github.io</span></span><br></pre></td></tr></table></figure></li><li>然后,我们这里的仓库地址是: AglaiaLight.github.io</li><li>以下就输入了: ping AglaiaLight.github.io</li><li>输入完以后,回车耐心等待就可以啦</li><li>然后就可以获取到<span class='p red'>ip</span>了,那当然我们这里是: 185.199.110.153<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/Git%E4%B8%ADPing%E5%AE%8C%E4%BA%86.png"></li></ol></div>              </div>            </details><details yellow><summary> PowerShell(第三种) </summary>              <div class='content'>              <div class="note warning modern"><ol start="35"><li>首先第二个工具: PowerShell</li><li>我们要在PowerShell中,用<span class='p red'>Ping</span>指令去获取博客默认的<span class='p red'>ip</span>地址</li><li>那博客的地址,相信大家都没忘吧,在创建仓库那个地方,仓库名就是呀！</li><li>所以这里直接拿过来 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/PowerShell%E4%B8%AD.png" alt=" "><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ping</span> <span class="string">您的Github用户名.github.io</span></span><br></pre></td></tr></table></figure></li><li>然后,我们这里的仓库地址是: AglaiaLight.github.io</li><li>以下就输入了: ping AglaiaLight.github.io</li><li>输入完以后,回车耐心等待就可以啦</li><li>然后就可以获取到<span class='p red'>ip</span>了,那当然我们这里是: 185.199.110.153<br><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/PowerShell%E4%B8%ADPing%E5%AE%8C%E4%BA%86.png"></li></ol></div>              </div>            </details>              </div>            </details><div class="note danger no-icon flat"><ol><li>以上,我们通过了<span class='p red'>Ping</span>指令获取到了博客<span class='p red'>ip</span>返回值</li><li>接下来,要把这个<span class='p red'>ip</span>返回值进行绑定到域名上</li><li>不知道,各位还记得不记得: <span class='p blue'>域名管理界面</span> </li><li>然后现在要先返回到<span class='p blue'>域名管理界面</span>: <a href="https://console.cloud.tencent.com/domain">域名管理界面地址在这里,把鼠标放在上面点击一下就可以啦</a> </li><li>然后这里,就会跳转到域名管理界面了,接着看到 “<span class='p blue'>解析</span>“ 那两个字了吗？点击一下就可以啦<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E8%A1%8C%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png"></li><li>接着就会自动跳转到 “DNSPOD域名解析设置” 就有很多功能的啦<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AE%E8%A7%A3%E6%9E%90.png"></li><li>我们这里只需要设置两个记录就可以啦~</li><li>但是这里需要修改的只有: 主机记录 记录类型 线路类型 记录值<table><thead><tr><th align="left">主机记录</th><th align="center">记录类型</th><th align="center">线路类型</th><th align="center">记录值</th></tr></thead><tbody><tr><td align="left">@</td><td align="center">A</td><td align="center">默认</td><td align="center">获得的博客IP</td></tr><tr><td align="left">www</td><td align="center">CNAME</td><td align="center">默认</td><td align="center">您的Github用户名.github.io</td></tr></tbody></table></li><li>我给大家解释一下 A记录对应的就是获取的博客IP值</li><li>第二条CAME记录指向的就是 www 的二级域名</li><li>通过以上的信息,我们开始填写</li><li>第一条记录先填写主机记录:@ | 记录类型: A | 线路类型: 默认 | 记录值: 获得的博客IP <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D.png"></li><li>第二条记录再填写主机记录:www | 记录类型: CNAME | 线路类型: 默认 | 记录值: 您的Github用户名.github.io </li><li>这样两个条记录就都填写完成了~<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D2.png"></li><li>接着还需要去,Hexo博客文件夹下创建一个CNAME文件</li><li>我们还回到Hexo博客主目录文件夹下<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%89%93%E5%BC%80%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%BC%96%E8%BE%91%E5%99%A8.png"></li><li>回到主目录下,现在需要进入到 “source” 文件夹下,双击一下就可以进入啦</li><li>好了,现在就进入到文件夹下了<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%88%9B%E5%BB%BACANME%E6%96%87%E4%BB%B6.png"></li><li>但现在,不是需要创建一个文件嘛,那就先在文件夹内右键,然后就会出现一个列表<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%88%9B%E5%BB%BACNAME1.png"></li><li>再把鼠标指针放在倒数第二个 “新建” 上就会出现一个列表,再点击倒数第二个文本文档即可<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%88%9B%E5%BB%BACANME4.png"></li><li>那现在,就创建好啦<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%88%9B%E5%BB%BACANME3.png"></li><li>新创建的文件没有名字,但记得把后缀名删掉然后，这里只需要填写CNAME，但是它会进行询问是否改名文件扩展名，这里直接选择 “是(Y)” 即可<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%AF%A2%E9%97%AE%E5%88%9B%E5%BB%BACANME%E6%98%AF%E5%90%A6.png"></li><li>好了,这样就创建好啦<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%88%9B%E5%BB%BACANME5.png">  </li><li>接下来,还需要给CNAME里添加上购买的域名才可以~ 接下来双击打开这个CNAME文件即可,但是打开的时候它会询问你要如何打开这个文件?<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%BE%91CANME.png"></li><li>如果你没有别的编辑器,可以暂时用记事本<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%89%93%E5%BC%80CANME%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F.png"></li><li>好了,我们现在进来了<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%BF%9B%E8%A1%8C%E5%87%86%E5%A4%87%E5%A1%AB%E5%86%99CANME.png"></li><li>然后,我们把刚才从腾讯云购买的域名地址粘贴进去即可,比如说我们这里是: “hopedlight.top” 就这样完整的填写进去 </li><li>然后按 “Ctrl + s” 保存一下然后再按一下 “Alt+F4” <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E5%A1%AB%E5%86%99%E8%BF%9BCNAME%E5%9F%9F%E5%90%8D.png"></li><li>接下来再回到Hexo博客根目录文件夹下即可 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%89%93%E5%BC%80%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%BC%96%E8%BE%91%E5%99%A8.png"></li><li>然后需要在根目录下右键打开Git客户端 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E8%BD%BD%E5%85%A5Git%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%AD.png"></li></ol><div class="note warning no-icon flat"><p>要把Hexo部署指令篇章的知识点,捡起来呀~<br>先清本地博客(db.json)文件的清理缓存,然后生成静态文件最后推送上Github仓库中</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">depoly</span></span><br></pre></td></tr></table></figure><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/%E9%83%A8%E7%BD%B2CANME.png"></p><div class="note info no-icon flat"><p>然后把指令回车,等待上传就可以啦</p></div><p><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E4%B8%8A%E4%BC%A0%E6%83%85%E5%86%B5.png"></p><div class="note success no-icon flat"><p>我们现在可以去仓库检查一下情况,好了我们可以看到已经把CNAME文件上传上来了</p></div><ul><li><ol><li>接着我们从仓库里看到导航排的最后一个按钮 Settings <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/CANME%E4%B8%8A%E4%BC%A0%E5%AE%8C%E6%AF%95.png"></li></ol></li><li><ol start="2"><li>点击一下它<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%AE%BE%E7%BD%AE%E6%8C%89%E9%92%AE.png"></li></ol></li><li><ol start="3"><li>就会跳转到仓库设置里了<img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E4%BB%93%E5%BA%93%E5%86%85%E8%AE%BE%E7%BD%AE.png">  </li></ol></li><li><ol start="4"><li>接下来,往下滑就会发现最后边倒数第二个配置项: GitHub Pages &gt; Pages settings now has its own dedicated tab! Check it out here! (其实就是页面现在有专用的链接了,点击一下它这个文字)</li></ol></li><li><ol start="5"><li>点击完那串文字中的 “Check it out here!” 就跳入到了 GitHub Pages 设置界面下 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E6%BB%91%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C.png"></li></ol></li><li><ol start="6"><li>看到绿色的那串了嘛, Your site is published at (您的网站在http://这里是你自己的域名.域名后缀/发布) <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%B7%B3%E8%BD%AC%E8%BF%9BGithubPages.png">  </li></ol></li><li><ol start="7"><li>我们来见证奇迹,点击一下这串字母,然后等待跳转 <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E7%82%B9%E5%87%BB%E5%9F%9F%E5%90%8D%E8%BF%9B%E5%85%A5.png">  </li></ol></li><li><ol start="8"><li>好了,恭喜你域名完成绑定~ <img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/posts/%E8%B7%B3%E8%BD%AC%E6%88%90%E5%8A%9F.png">  </div></li></ol></li></ul>              </div>            </details>              </div>            </details><h3 id="有惊喜的你确定不要看嘛？"><a href="#有惊喜的你确定不要看嘛？" class="headerlink" title="有惊喜的你确定不要看嘛？"></a>有惊喜的你确定不要看嘛？</h3><details blue><summary> 文章小结(有惊喜!) </summary>              <div class='content'>              <ol><li><p>相信大家在本章学习了很多内容,那到头来无非也就那几个知识点而已,像我们了解的最常见的搭建两个环境、安装主题应用主题这些其实都是很基础的点，而我们要做的就是,把这些基础知识牢牢地掌握住,才能在今后搭建博客中奠定基础的阶梯.</p></li><li><p>但我要在和各位说一声抱歉,这篇文章我是拖了很久才写完的,那我在写这篇文章的时候就一直在想: 我这样写会不会有问题呢? 我还有哪个点没讲清楚? 还有哪个地方语句不通顺? </p></li><li><p>那各位同学你们想一个问题,那搭建博客这个过程真的就只是搭建博客吗? 在这个过程中,如果我们只是无味的学习着搭建博客,那我可以很负责任的告诉你,就算你搭建出来可能心里会满足了,那获取的也只不过是从层面上的满足感罢了,我希望你们搭建博客的时候,是带着学习的好奇心去尝试着一点点搭建,包括那些博客搭建指令,我也不希望你们只是背到脑海的记忆当中,而是通过逐渐的理解去慢慢使用它.</p></li><li><p>当然了我也不得不批判自己,因为这篇文章我也写的不是多好,但是我尽力了因为这篇文章的初衷就是希望站在写者的角度换位思考,能够与读者对立面在一条线上,并且把<span class='p blue'>Hexo博客</span>搭建的所有知识点贴合于文章之中.</p></li><li><p>当然也很感谢坐在屏幕前的所有同学,能够认真的把我第一篇的文章看完谢谢你们.</p></li><li><p>再次我由衷表示的感谢<a href="https://akilar.top/">店长</a>给这篇文章给予所带来的宝贵的建议.</p></li><li><p>我也希望各位同学,在今后的学习中: <span class='p red'>积一时之跬步，臻千里之遥程</span> <div class="img-wrap"><div class="img-bg"><img class="img" src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/表情包2.png" style="width:400px;"/></div></div></p></li></ol><details ><summary> cyan 小惊喜~(记得要看哦) </summary>              <div class='content'>              <p><span class='p center logo large blue'>恭喜你找到了彩蛋</span></p><ol><li>这篇文章我是为大家准备了两套教程方式,一套呢就是你们上面所看过的图文教程</li><li>第二种呢,也是我专程为大家录的视频素材,那在视频当中全程无采用Pr的后期剪辑(因此也就重拍了几百遍才成功的吧)</li><li>为考虑到各位同学更好的学习搭建,我也把本次录制课程的博客和步骤的文件上传至了 <span class='p blue'>Github</span>、<span class='p blue'>网盘</span></li></ol><div class="note simple"><div class="tag link"><a class="link-card" title="课程录制步骤的文件" href="https://cdn.jsdelivr.net/gh/HopeLight/photo/save/Hexo从无到有视频搭建过程.txt"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Github.png"/></div><div class="right"><p class="text">课程录制步骤的文件</p><p class="url">https://cdn.jsdelivr.net/gh/HopeLight/photo/save/Hexo从无到有视频搭建过程.txt</p></div></a></div> </div>  <div class="note simple"><div class="tag link"><a class="link-card" title="课程搭建的博客文件" href="https://cdn.jsdelivr.net/gh/HopeLight/photo/save/Hexo博客.zip"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Github.png"/></div><div class="right"><p class="text">课程搭建的博客文件</p><p class="url">https://cdn.jsdelivr.net/gh/HopeLight/photo/save/Hexo博客.zip</p></div></a></div> </div>  <div class="note simple"><div class="tag link"><a class="link-card" title="课程录制的视频文件" href="https://pan.baidu.com/s/1lq19TH24yzt8vPyYNUDXHw"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Github.png"/></div><div class="right"><p class="text">课程录制的视频文件</p><p class="url">https://pan.baidu.com/s/1lq19TH24yzt8vPyYNUDXHw</p></div></a></div> 提取码: i5c2 </div>  <div class="note success modern"><p>由于视频的文件有点大,所以我传到了B站上</p></div><div class="note simple"><div class="tag link"><a class="link-card" title="Hexo博客搭建的从无到有视频录制" href="https://www.bilibili.com/video/BV12g411g75a?zw"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/B站.png"/></div><div class="right"><p class="text">Hexo博客搭建的从无到有视频录制</p><p class="url">https://www.bilibili.com/video/BV12g411g75a?zw</p></div></a></div> </div>  <ol><li>视频中所演示的,是从头到搭建Hexo和部署的过程</li><li>但我希望就算你提前找到这,最好还是先去看图文,实在不会了你再搭配着视频学习</li><li>我拍这个视频的意义,不是教会你怎么快速搭建完博客,而是希望能借助视频的引导,来弥补不你搭建过程中迷惑的地方</li><li>最后各位有什么问题,欢迎在最下方交流区进行阐述</li><li>但回复交流区的时候会很少,所以各位如果有很需要解答的问题也可以加入糖果屋售后群进行探讨！</li></ol><div class="note simple"><div class="tag link"><a class="link-card" title="糖果屋一对一专业售后群为您打造不一样的交流天地" href="https://jq.qq.com/?_wv=1027&k=J5mq2QgY"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/load.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/HopeLight/photo/blog/Candy.png"/></div><div class="right"><p class="text">糖果屋一对一专业售后群为您打造不一样的交流天地</p><p class="url">https://jq.qq.com/?_wv=1027&k=J5mq2QgY</p></div></a></div> </div>                </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 搭建🖼️ </category>
          
          <category> Hexo⚙️ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署到Centos系统上</title>
      <link href="2021/06/07/HexoDeploy/"/>
      <url>2021/06/07/HexoDeploy/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ol><li>准备环境一台云服务器,暂时用Centos8(当然你也可以选择别的服务器)</li><li>本地需准备好 “Node.js” 、 “Git客户端”两大环境</li></ol><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><div class="note default no-icon flat"><ol><li>安装node js: <a href="https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz">https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz</a></li><li>解压node js: tar -xvf node-v8.9.4-linux-x64.tar.xz</li></ol></div><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><div class="note warning no-icon flat"><ol><li>安装Git: yum install git</li><li>创建Git用户: adduser git</li><li>给权限: chmod 740 /etc/sudoers</li><li>写入权限: vim /etc/sudoers</li></ol></div><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><div class="note success no-icon flat"><ol><li>安装Nginx: yum install nginx -y</li><li>启动Nginx: systemctl start nginx</li><li>重启Nginx: systemctl restart nginx.service</li><li>设置开机启动: systemctl enable nginx.service</li><li>然后用你服务器公网IP访问,就可以看到这个了</li><li>但是这里记得要开放一下80端口</li></ol></div><h3 id="Linux配置文件方法"><a href="#Linux配置文件方法" class="headerlink" title="Linux配置文件方法"></a>Linux配置文件方法</h3><div class="note primary no-icon flat"><ol><li>在Linux配置文件修改当中,按”i”可以进行修改内容</li><li>当然也可以按END切换输入</li><li>记得要按ESC再按”:”再输入”wq”即可保存退出</li><li>记得要按ESC再按”q”可以直接退出</li></ol></div>]]></content>
      
      
      <categories>
          
          <category> 搭建🖼️ </category>
          
          <category> Hexo⚙️ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Minecraft服务端MCDR优化</title>
      <link href="2021/04/21/MCDR%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/21/MCDR%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> MineCraft🟫 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> MineCraft </tag>
            
            <tag> 服务端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于解决电脑C盘占用的问题</title>
      <link href="2021/04/21/Win10C%E7%9B%98%E5%86%85%E5%AD%98%E5%87%8F%E5%B0%91/"/>
      <url>2021/04/21/Win10C%E7%9B%98%E5%86%85%E5%AD%98%E5%87%8F%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 电脑💻 </category>
          
          <category> 占用💾 </category>
          
          <category> 分享📓 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 占用 </tag>
            
            <tag> 内存 </tag>
            
            <tag> 电脑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何白嫖System付费游戏</title>
      <link href="2021/04/21/%E5%A6%82%E4%BD%95%E7%99%BD%E5%AB%96System%E4%BB%98%E8%B4%B9%E6%B8%B8%E6%88%8F/"/>
      <url>2021/04/21/%E5%A6%82%E4%BD%95%E7%99%BD%E5%AB%96System%E4%BB%98%E8%B4%B9%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 电脑💻 </category>
          
          <category> 占用💾 </category>
          
          <category> 分享📓 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 占用 </tag>
            
            <tag> 内存 </tag>
            
            <tag> 电脑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客编辑器</title>
      <link href="2021/04/19/Hexo%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>2021/04/19/Hexo%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 技术⌨️ </category>
          
          <category> 分享📓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 安装 </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把图片放在github仓库里</title>
      <link href="2021/04/18/Hexo%E5%9B%BE%E7%89%87%E5%A6%82%E4%BD%95%E6%94%BE%E7%BD%AE/"/>
      <url>2021/04/18/Hexo%E5%9B%BE%E7%89%87%E5%A6%82%E4%BD%95%E6%94%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 技术⌨️ </category>
          
          <category> 系统🔋 </category>
          
          <category> 分享📓 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> win10 </tag>
            
            <tag> 系统 </tag>
            
            <tag> 占用 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10优化开机速度</title>
      <link href="2021/04/18/Win10%E4%BC%98%E5%8C%96%E5%BC%80%E6%9C%BA%E9%80%9F%E5%BA%A6/"/>
      <url>2021/04/18/Win10%E4%BC%98%E5%8C%96%E5%BC%80%E6%9C%BA%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 技术⌨️ </category>
          
          <category> 系统🔋 </category>
          
          <category> 分享📓 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> win10 </tag>
            
            <tag> 系统 </tag>
            
            <tag> 占用 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10关闭系统更新</title>
      <link href="2021/04/18/Win10%E5%85%B3%E9%97%AD%E6%9B%B4%E6%96%B0/"/>
      <url>2021/04/18/Win10%E5%85%B3%E9%97%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 技术⌨️ </category>
          
          <category> 系统🔋 </category>
          
          <category> 分享📓 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> win10 </tag>
            
            <tag> 系统 </tag>
            
            <tag> 占用 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Pr提取出视频的背景音乐</title>
      <link href="2021/04/18/%E5%A6%82%E4%BD%95%E7%94%A8Pr%E6%8F%90%E5%8F%96%E5%87%BA%E8%A7%86%E9%A2%91%E7%9A%84%E9%9F%B3%E4%B9%90/"/>
      <url>2021/04/18/%E5%A6%82%E4%BD%95%E7%94%A8Pr%E6%8F%90%E5%8F%96%E5%87%BA%E8%A7%86%E9%A2%91%E7%9A%84%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 技术⌨️ </category>
          
          <category> 系统🔋 </category>
          
          <category> 分享📓 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> win10 </tag>
            
            <tag> 系统 </tag>
            
            <tag> 占用 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费视频解析</title>
      <link href="2021/04/17/VIP%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90/"/>
      <url>2021/04/17/VIP%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>你以为,这篇内容,我真的会正儿八经写？？<br>No,No,No</p>]]></content>
      
      
      <categories>
          
          <category> 技术⌨️ </category>
          
          <category> 白嫖🥱 </category>
          
          <category> 分享📓 </category>
          
          <category> 教程🧨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> win10 </tag>
            
            <tag> 白嫖 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
